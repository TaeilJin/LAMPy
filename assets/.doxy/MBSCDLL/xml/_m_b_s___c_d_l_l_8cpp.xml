<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="_m_b_s___c_d_l_l_8cpp" kind="file" language="C++">
    <compoundname>MBS_CDLL.cpp</compoundname>
    <includes local="no">Windows.h</includes>
    <includes local="yes">MBS/MBSLoader.h</includes>
    <includes refid="save_b_v_h_8h" local="yes">saveBVH.h</includes>
    <includes refid="mg_pose_transfer___i_k_8h" local="yes">mgPoseTransfer_IK.h</includes>
    <incdepgraph>
      <node id="12">
        <label>Character/bCharacterLoader.h</label>
      </node>
      <node id="1">
        <label>MBS_CDLL/MBS_CDLL.cpp</label>
        <link refid="_m_b_s___c_d_l_l_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>mgPoseTransfer_IK.h</label>
        <link refid="mg_pose_transfer___i_k_8h_source"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>saveBVH.h</label>
        <link refid="save_b_v_h_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>Loader/MotionLoader.h</label>
      </node>
      <node id="14">
        <label>Loader/mgSkeletonToBCharacter.h</label>
      </node>
      <node id="3">
        <label>MBS/MBSLoader.h</label>
      </node>
      <node id="15">
        <label>MocapProcessor/mgMBSUtil.h</label>
      </node>
      <node id="16">
        <label>MocapProcessor/mgUtility.h</label>
      </node>
      <node id="17">
        <label>Visualizer/gBdOsgSystem.h</label>
      </node>
      <node id="19">
        <label>Visualizer/gOSGShape.h</label>
      </node>
      <node id="18">
        <label>Visualizer/gOSGSkin.h</label>
      </node>
      <node id="2">
        <label>Windows.h</label>
      </node>
      <node id="6">
        <label>algorithm</label>
      </node>
      <node id="5">
        <label>iostream</label>
      </node>
      <node id="36">
        <label>levmar.h</label>
      </node>
      <node id="35">
        <label>mbs/gMultibodySystem.h</label>
      </node>
      <node id="33">
        <label>osg/BlendFunc</label>
      </node>
      <node id="7">
        <label>osg/Geode</label>
      </node>
      <node id="10">
        <label>osg/LineWidth</label>
      </node>
      <node id="31">
        <label>osg/TriangleIndexFunctor</label>
      </node>
      <node id="22">
        <label>osgAnimation/Animation</label>
      </node>
      <node id="20">
        <label>osgAnimation/AnimationManagerBase</label>
      </node>
      <node id="21">
        <label>osgAnimation/BasicAnimationManager</label>
      </node>
      <node id="24">
        <label>osgAnimation/Bone</label>
      </node>
      <node id="23">
        <label>osgAnimation/Skeleton</label>
      </node>
      <node id="27">
        <label>osgAnimation/StackedMatrixElement</label>
      </node>
      <node id="29">
        <label>osgAnimation/StackedQuaternionElement</label>
      </node>
      <node id="26">
        <label>osgAnimation/StackedRotateAxisElement</label>
      </node>
      <node id="30">
        <label>osgAnimation/StackedScaleElement</label>
      </node>
      <node id="28">
        <label>osgAnimation/StackedTranslateElement</label>
      </node>
      <node id="25">
        <label>osgAnimation/UpdateBone</label>
      </node>
      <node id="32">
        <label>osgDB/Options</label>
      </node>
      <node id="11">
        <label>osgDB/ReadFile</label>
      </node>
      <node id="9">
        <label>osgGA/TrackballManipulator</label>
      </node>
      <node id="8">
        <label>osgViewer/Viewer</label>
      </node>
    </incdepgraph>
    <sectiondef kind="define">
      <memberdef kind="define" id="_m_b_s___c_d_l_l_8cpp_1a1ca888bd091694c05472e1b91df1a97b" prot="public" static="no">
        <name>DLL_EXPORT</name>
        <initializer>__declspec(dllimport)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="10" column="10" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="10" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="_m_b_s___c_d_l_l_8cpp_1ade5e37be4b23f5344dc1cf41af7fa80e" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double DEBUG_DRAW_CONSTRAINT_SIZE</definition>
        <argsstring></argsstring>
        <name>DEBUG_DRAW_CONSTRAINT_SIZE</name>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="14" column="8" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_m_b_s___c_d_l_l_8cpp_1ae621cd9f5b9f5f137c0ec2654e3f0c04" prot="public" static="no" mutable="no">
        <type>gMultibodySystem *</type>
        <definition>gMultibodySystem* mbs</definition>
        <argsstring></argsstring>
        <name>mbs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="18" column="18" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_m_b_s___c_d_l_l_8cpp_1a9f7fc8aa6afc222ed9336a7a476b7d48" prot="public" static="no" mutable="no">
        <type>gMultibodySystem *</type>
        <definition>gMultibodySystem* mbs_src</definition>
        <argsstring></argsstring>
        <name>mbs_src</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="20" column="18" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_m_b_s___c_d_l_l_8cpp_1a051bc73faa5cd9b5562e98e0cdebe0be" prot="public" static="no" mutable="no">
        <type>gMultibodySystem *</type>
        <definition>gMultibodySystem* mbs_tar</definition>
        <argsstring></argsstring>
        <name>mbs_tar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="21" column="18" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_m_b_s___c_d_l_l_8cpp_1a3b5d8caf01b6f9af91d5ddc920b4ca9f" prot="public" static="no" mutable="no">
        <type><ref refid="classmg_pose_i_k_solver" kindref="compound">mgPoseIKSolver</ref> *</type>
        <definition>mgPoseIKSolver* g_poseTrans_Avatar</definition>
        <argsstring></argsstring>
        <name>g_poseTrans_Avatar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="23" column="16" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_m_b_s___c_d_l_l_8cpp_1a9b3f5668f890229fe9143682acca51ff" prot="public" static="no" mutable="no">
        <type>float</type>
        <definition>float srcFrameTime</definition>
        <argsstring></argsstring>
        <name>srcFrameTime</name>
        <initializer>= 30</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="25" column="7" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_m_b_s___c_d_l_l_8cpp_1a2e96625c1bee5eb32ce2d596f9d10a49" prot="public" static="no" mutable="no">
        <type>arma::mat</type>
        <definition>arma::mat tarQuaternions</definition>
        <argsstring></argsstring>
        <name>tarQuaternions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="26" column="11" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_m_b_s___c_d_l_l_8cpp_1ad0f0017f304e94a1d98c62d86e8f14a0" prot="public" static="no" mutable="no">
        <type>arma::mat</type>
        <definition>arma::mat g_refCoord</definition>
        <argsstring></argsstring>
        <name>g_refCoord</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="27" column="11" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_m_b_s___c_d_l_l_8cpp_1a2448c7e67a2e9a7efe8dddadf8e9e278" prot="public" static="no" mutable="no">
        <type><ref refid="classsave_b_v_h" kindref="compound">saveBVH</ref> *</type>
        <definition>saveBVH* g_saveBVH</definition>
        <argsstring></argsstring>
        <name>g_saveBVH</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="28" column="9" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="28" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1ab8ab36eff6bfd3f1d9761d5250e88584" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>gVec3</type>
        <definition>gVec3 MW_GRAVITY_VECTOR</definition>
        <argsstring>(0, -9.8, 0)</argsstring>
        <name>MW_GRAVITY_VECTOR</name>
        <param>
          <type>0</type>
        </param>
        <param>
          <type>-9.</type>
          <declname>8</declname>
        </param>
        <param>
          <type>0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="15" column="7" declfile="MBS_CDLL/MBS_CDLL.cpp" declline="15" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1a2460833e8376407f82c545e9b7cf7dcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>gVec3</type>
        <definition>gVec3 MW_GROUND_NORMAL</definition>
        <argsstring>(0, 1, 0)</argsstring>
        <name>MW_GROUND_NORMAL</name>
        <param>
          <type>0</type>
        </param>
        <param>
          <type>1</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="16" column="7" declfile="MBS_CDLL/MBS_CDLL.cpp" declline="16" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1a385aecc3387688b4b1ae3231c83d4e8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SetJntRotDirOBJ</definition>
        <argsstring>(mgPoseIKSolver *poseTrans, char *txt_id, char *src_jnt, char *tar_jnt)</argsstring>
        <name>SetJntRotDirOBJ</name>
        <param>
          <type><ref refid="classmg_pose_i_k_solver" kindref="compound">mgPoseIKSolver</ref> *</type>
          <declname>poseTrans</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>txt_id</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>src_jnt</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>tar_jnt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="30" column="6" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="30" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1a798d3029f732e86e8d1bbcdd768d2b2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SetJntRotDirOBJ</definition>
        <argsstring>(mgPoseIKSolver *poseTrans, char *txt_id, char *src_jnt, gVec3 s_X, gVec3 s_Z, char *tar_jnt, gVec3 t_X, gVec3 t_Z)</argsstring>
        <name>SetJntRotDirOBJ</name>
        <param>
          <type><ref refid="classmg_pose_i_k_solver" kindref="compound">mgPoseIKSolver</ref> *</type>
          <declname>poseTrans</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>txt_id</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>src_jnt</declname>
        </param>
        <param>
          <type>gVec3</type>
          <declname>s_X</declname>
        </param>
        <param>
          <type>gVec3</type>
          <declname>s_Z</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>tar_jnt</declname>
        </param>
        <param>
          <type>gVec3</type>
          <declname>t_X</declname>
        </param>
        <param>
          <type>gVec3</type>
          <declname>t_Z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="34" column="6" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="34" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1a5502e477bd01643949486b5f06a03b55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SetJntRotDirOBJ</definition>
        <argsstring>(mgPoseIKSolver *poseTrans, char *txt_id, char *src_jnt, gVec3 s_X, gVec3 s_Z, gVec3 s_Y, char *tar_jnt, gVec3 t_X, gVec3 t_Z, gVec3 t_Y)</argsstring>
        <name>SetJntRotDirOBJ</name>
        <param>
          <type><ref refid="classmg_pose_i_k_solver" kindref="compound">mgPoseIKSolver</ref> *</type>
          <declname>poseTrans</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>txt_id</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>src_jnt</declname>
        </param>
        <param>
          <type>gVec3</type>
          <declname>s_X</declname>
        </param>
        <param>
          <type>gVec3</type>
          <declname>s_Z</declname>
        </param>
        <param>
          <type>gVec3</type>
          <declname>s_Y</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>tar_jnt</declname>
        </param>
        <param>
          <type>gVec3</type>
          <declname>t_X</declname>
        </param>
        <param>
          <type>gVec3</type>
          <declname>t_Z</declname>
        </param>
        <param>
          <type>gVec3</type>
          <declname>t_Y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="64" column="6" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="64" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1a6bf9a39d2521f4b080d73b826d1500ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>gRotMat</type>
        <definition>gRotMat TranseRotUnitytoMW</definition>
        <argsstring>(float x, float y, float z, float w)</argsstring>
        <name>TranseRotUnitytoMW</name>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>float</type>
          <declname>z</declname>
        </param>
        <param>
          <type>float</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="91" column="9" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="91" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1ac9107ac0c0bbccc2594eb64e9855ac5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT void</type>
        <definition>DLL_EXPORT void GEN_MBS_TXTFILE</definition>
        <argsstring>(LPCSTR tarCharacterMotionFile, LPCSTR tarCharactertxt)</argsstring>
        <name>GEN_MBS_TXTFILE</name>
        <param>
          <type>LPCSTR</type>
          <declname>tarCharacterMotionFile</declname>
        </param>
        <param>
          <type>LPCSTR</type>
          <declname>tarCharactertxt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="116" column="17" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="116" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1adb8aeb146fc7d8e919128cd7b2a6baae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT void</type>
        <definition>DLL_EXPORT void UPDATE_MBS</definition>
        <argsstring>(int mbs_i)</argsstring>
        <name>UPDATE_MBS</name>
        <param>
          <type>int</type>
          <declname>mbs_i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="132" column="17" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="132" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1ab009f383d4f684e5449c48a23eec39d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT void</type>
        <definition>DLL_EXPORT void SET_MBS_FromEXP</definition>
        <argsstring>(int mbs_i, float *joint_vec)</argsstring>
        <name>SET_MBS_FromEXP</name>
        <param>
          <type>int</type>
          <declname>mbs_i</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>joint_vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="141" column="17" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="141" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1a160b77d16b34c7a4073bfebb054bdf33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT void</type>
        <definition>DLL_EXPORT void SET_MBS_JOINT_FromEXP</definition>
        <argsstring>(int joint_id, float *joint_vec)</argsstring>
        <name>SET_MBS_JOINT_FromEXP</name>
        <param>
          <type>int</type>
          <declname>joint_id</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>joint_vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="169" column="17" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="169" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1a19e777a7a7238eb03558594338524db7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT void</type>
        <definition>DLL_EXPORT void SET_MBS_JOINT_FromQuat</definition>
        <argsstring>(int joint_id, float *joint_vec)</argsstring>
        <name>SET_MBS_JOINT_FromQuat</name>
        <param>
          <type>int</type>
          <declname>joint_id</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>joint_vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="173" column="17" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="173" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1a33d787fb083e1334c3cd2a4208488500" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT const float *</type>
        <definition>DLL_EXPORT const float * READ_MBS_POSE</definition>
        <argsstring>(int mbs_i)</argsstring>
        <name>READ_MBS_POSE</name>
        <param>
          <type>int</type>
          <declname>mbs_i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="183" column="24" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="183" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1ac5aca0e6cf99b01db68be5566e377b5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT const float *</type>
        <definition>DLL_EXPORT const float * READ_MBS_JOINT_POSITION</definition>
        <argsstring>(int mbs_i, int joint_id)</argsstring>
        <name>READ_MBS_JOINT_POSITION</name>
        <param>
          <type>int</type>
          <declname>mbs_i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>joint_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="236" column="24" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="236" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1a6b7cb6cfa456371baf318fd7d5cd951c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT const float *</type>
        <definition>DLL_EXPORT const float * READ_MBS_JOINT_WORLD_QUAT</definition>
        <argsstring>(int joint_id)</argsstring>
        <name>READ_MBS_JOINT_WORLD_QUAT</name>
        <param>
          <type>int</type>
          <declname>joint_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="257" column="24" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="257" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1a97441b00e8f2b9283750a739114716be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT const float *</type>
        <definition>DLL_EXPORT const float * READ_MBS_JOINT_LOCAL_QUAT</definition>
        <argsstring>(int joint_id)</argsstring>
        <name>READ_MBS_JOINT_LOCAL_QUAT</name>
        <param>
          <type>int</type>
          <declname>joint_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="265" column="24" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="265" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1add882764703ba3eefb1e926b216aff5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT LPCSTR</type>
        <definition>DLL_EXPORT LPCSTR READ_JOINTNAME</definition>
        <argsstring>(int i)</argsstring>
        <name>READ_JOINTNAME</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="274" column="19" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="274" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1aa8d43602436561f1b300e095195226eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT int</type>
        <definition>DLL_EXPORT int LOAD_SRC_TAR_MBS</definition>
        <argsstring>(LPCSTR chaSrcTXTFile, LPCSTR chaTarTXTFile)</argsstring>
        <name>LOAD_SRC_TAR_MBS</name>
        <param>
          <type>LPCSTR</type>
          <declname>chaSrcTXTFile</declname>
        </param>
        <param>
          <type>LPCSTR</type>
          <declname>chaTarTXTFile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="284" column="16" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="284" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1a7fcdcc110c1b755fad57e710f5689836" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT int</type>
        <definition>DLL_EXPORT int INIT_RETARGET</definition>
        <argsstring>()</argsstring>
        <name>INIT_RETARGET</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="303" column="16" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="303" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1aacb3b2d65a539f1b3175ba6d40308c2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT int</type>
        <definition>DLL_EXPORT int LOAD_SRC_MOTION</definition>
        <argsstring>(LPCSTR srcfilename, float src_scale)</argsstring>
        <name>LOAD_SRC_MOTION</name>
        <param>
          <type>LPCSTR</type>
          <declname>srcfilename</declname>
        </param>
        <param>
          <type>float</type>
          <declname>src_scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="312" column="16" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="312" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1a95c39b8ff4bec8a4e254ec07a4177ebb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT int</type>
        <definition>DLL_EXPORT int READ_TOTALFRAMES</definition>
        <argsstring>()</argsstring>
        <name>READ_TOTALFRAMES</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="344" column="16" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="344" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1a60476e6cf0739614168db0be1f6beeed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT float</type>
        <definition>DLL_EXPORT float READ_FrameTime</definition>
        <argsstring>()</argsstring>
        <name>READ_FrameTime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="347" column="18" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="347" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1a217d6bc3b3dc6bc7d91cc94448b57394" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT void</type>
        <definition>DLL_EXPORT void INIT_MAPPING_fromTXT</definition>
        <argsstring>(char *txtfile)</argsstring>
        <name>INIT_MAPPING_fromTXT</name>
        <param>
          <type>char *</type>
          <declname>txtfile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="352" column="17" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="352" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1acdbfe510d1084133fe58e2547a9a1723" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT int</type>
        <definition>DLL_EXPORT int MAPPING_JOINTS</definition>
        <argsstring>(const char *mapped_name, const char *src_name, const char *tar_name)</argsstring>
        <name>MAPPING_JOINTS</name>
        <param>
          <type>const char *</type>
          <declname>mapped_name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>src_name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>tar_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="442" column="16" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="442" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1a1b4a9a62aaaaa2c5b7048491d654ceb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT int</type>
        <definition>DLL_EXPORT int MAPPING_JOINTS_withAXIS</definition>
        <argsstring>(const char *mapped_name, const char *src_name, const char *tar_name, gVec3 g_src_X, gVec3 g_src_Y, gVec3 g_src_Z, gVec3 g_tar_X, gVec3 g_tar_Y, gVec3 g_tar_Z)</argsstring>
        <name>MAPPING_JOINTS_withAXIS</name>
        <param>
          <type>const char *</type>
          <declname>mapped_name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>src_name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>tar_name</declname>
        </param>
        <param>
          <type>gVec3</type>
          <declname>g_src_X</declname>
        </param>
        <param>
          <type>gVec3</type>
          <declname>g_src_Y</declname>
        </param>
        <param>
          <type>gVec3</type>
          <declname>g_src_Z</declname>
        </param>
        <param>
          <type>gVec3</type>
          <declname>g_tar_X</declname>
        </param>
        <param>
          <type>gVec3</type>
          <declname>g_tar_Y</declname>
        </param>
        <param>
          <type>gVec3</type>
          <declname>g_tar_Z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="451" column="16" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="451" bodyend="473"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1a5453fdc2c5b088075575994a72f5f9fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT int</type>
        <definition>DLL_EXPORT int MAPPING_DIRS</definition>
        <argsstring>(const char *j_start, const char *j_to, float weightDir)</argsstring>
        <name>MAPPING_DIRS</name>
        <param>
          <type>const char *</type>
          <declname>j_start</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>j_to</declname>
        </param>
        <param>
          <type>float</type>
          <declname>weightDir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="474" column="16" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="474" bodyend="479"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1a8520da0758340978608a7facb3244f7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT int</type>
        <definition>DLL_EXPORT int MAPPING_POS</definition>
        <argsstring>(const char *j_to, float weightPos)</argsstring>
        <name>MAPPING_POS</name>
        <param>
          <type>const char *</type>
          <declname>j_to</declname>
        </param>
        <param>
          <type>float</type>
          <declname>weightPos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="480" column="16" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="480" bodyend="484"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1ae0394c84fe1b592fc06ccc9224c76e8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT void</type>
        <definition>DLL_EXPORT void DO_RETARGET_OUTPUT</definition>
        <argsstring>(float x_offset, float y_offset, float z_offset)</argsstring>
        <name>DO_RETARGET_OUTPUT</name>
        <param>
          <type>float</type>
          <declname>x_offset</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y_offset</declname>
        </param>
        <param>
          <type>float</type>
          <declname>z_offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="487" column="17" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="487" bodyend="514"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1a81cdb2258edac07c9629508f87bd1826" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT void</type>
        <definition>DLL_EXPORT void UPDATE_SRC_POINTS</definition>
        <argsstring>()</argsstring>
        <name>UPDATE_SRC_POINTS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="518" column="17" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="518" bodyend="522"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1ab5fbd45a8f5cd7c9d7baf8b61c178bde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT const float *</type>
        <definition>DLL_EXPORT const float * READ_SRC_POINTS</definition>
        <argsstring>(int joint_id)</argsstring>
        <name>READ_SRC_POINTS</name>
        <param>
          <type>int</type>
          <declname>joint_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="523" column="24" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="523" bodyend="532"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1ae837f09e9aecec9fdb6e44ccfb9e5a41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT void</type>
        <definition>DLL_EXPORT void UPDATE_TAR_POINTS</definition>
        <argsstring>()</argsstring>
        <name>UPDATE_TAR_POINTS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="533" column="17" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="533" bodyend="537"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1a7d3c018a7c7b7ae5787305509fd198fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT const float *</type>
        <definition>DLL_EXPORT const float * READ_TAR_POINTS</definition>
        <argsstring>(int joint_id)</argsstring>
        <name>READ_TAR_POINTS</name>
        <param>
          <type>int</type>
          <declname>joint_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="538" column="24" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="538" bodyend="547"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1a7cdf8fc59cbbd575dab798a047dd6b00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT void</type>
        <definition>DLL_EXPORT void SRC_STORECOORD</definition>
        <argsstring>()</argsstring>
        <name>SRC_STORECOORD</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="548" column="17" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="548" bodyend="550"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1a4e7c42bda7c12a33895780bf868ea20b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT void</type>
        <definition>DLL_EXPORT void SRC_RESTORECOORD</definition>
        <argsstring>()</argsstring>
        <name>SRC_RESTORECOORD</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="551" column="17" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="551" bodyend="553"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1a8869bd52e509a4ee18372d92b5d8872e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT void</type>
        <definition>DLL_EXPORT void SET_DESIRED_BASE</definition>
        <argsstring>(float *base)</argsstring>
        <name>SET_DESIRED_BASE</name>
        <param>
          <type>float *</type>
          <declname>base</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="554" column="17" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="554" bodyend="556"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1a46406d7a6a48080526780f7959bc6e7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT int</type>
        <definition>DLL_EXPORT int READ_DIRECTION_SIZE</definition>
        <argsstring>()</argsstring>
        <name>READ_DIRECTION_SIZE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="557" column="16" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="557" bodyend="559"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1aae89f43b96ff28c5ea4458b87e879b7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT void</type>
        <definition>DLL_EXPORT void GET_DIRECTIONS</definition>
        <argsstring>(int i, int *idx0, int *idx1)</argsstring>
        <name>GET_DIRECTIONS</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>idx0</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>idx1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="560" column="17" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="560" bodyend="563"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1a721a219226b63405b2fd9b9171a07095" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT const float *</type>
        <definition>DLL_EXPORT const float * MEASURE_DIRECTION</definition>
        <argsstring>(int idx0, int idx1)</argsstring>
        <name>MEASURE_DIRECTION</name>
        <param>
          <type>int</type>
          <declname>idx0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idx1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="564" column="24" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="564" bodyend="575"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1a5d33954b0c06712024090e910c10ced7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT const float *</type>
        <definition>DLL_EXPORT const float * MEASURE_POSITION</definition>
        <argsstring>(int idx0, float *desPoints)</argsstring>
        <name>MEASURE_POSITION</name>
        <param>
          <type>int</type>
          <declname>idx0</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>desPoints</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="576" column="24" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="576" bodyend="585"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1ab5f884ea91db84e497d09a92031947c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT int</type>
        <definition>DLL_EXPORT int LOAD_MBS</definition>
        <argsstring>(LPCSTR chaSrcTXTFile)</argsstring>
        <name>LOAD_MBS</name>
        <param>
          <type>LPCSTR</type>
          <declname>chaSrcTXTFile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="590" column="16" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="590" bodyend="599"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1af045a3f2f906cd47a3fafb22599ccad2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT void</type>
        <definition>DLL_EXPORT void DO_POSE_IK</definition>
        <argsstring>()</argsstring>
        <name>DO_POSE_IK</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="601" column="17" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="601" bodyend="616"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1a58ae0f3686cca5f762f75bb986716aeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT int</type>
        <definition>DLL_EXPORT int INIT_IK</definition>
        <argsstring>()</argsstring>
        <name>INIT_IK</name>
        <briefdescription>
<para>Initialize Retargeting Solver (processing mbs is constructed) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>DLL_EXPORT </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="623" column="16" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="623" bodyend="628"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1a1d262c684131734469512454b479faac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT LPCSTR</type>
        <definition>DLL_EXPORT LPCSTR INIT_JOINT_LIST</definition>
        <argsstring>(int i)</argsstring>
        <name>INIT_JOINT_LIST</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Ouput name of whole joints. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of joint </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DLL_EXPORT </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="636" column="19" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="636" bodyend="641"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1ae7884f2af2c3d02ea9c90c71306e4b5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT int</type>
        <definition>DLL_EXPORT int SETUP_DES_DIR_JOINTS</definition>
        <argsstring>(LPCSTR mapped_name, LPCSTR joint_name)</argsstring>
        <name>SETUP_DES_DIR_JOINTS</name>
        <param>
          <type>LPCSTR</type>
          <declname>mapped_name</declname>
        </param>
        <param>
          <type>LPCSTR</type>
          <declname>joint_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="642" column="16" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="642" bodyend="646"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1a122087160b1d3565c4330c13f1555fa5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT int</type>
        <definition>DLL_EXPORT int SETTING_DESDIRJOINTS</definition>
        <argsstring>(LPCSTR mapped_name, LPCSTR src_name)</argsstring>
        <name>SETTING_DESDIRJOINTS</name>
        <param>
          <type>LPCSTR</type>
          <declname>mapped_name</declname>
        </param>
        <param>
          <type>LPCSTR</type>
          <declname>src_name</declname>
        </param>
        <briefdescription>
<para>Constructing points for IK solving. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mapped_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of point </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of joint </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DLL_EXPORT </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="654" column="16" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="654" bodyend="660"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1a7e84db133aa794e3b109d1271aa08f11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT int</type>
        <definition>DLL_EXPORT int ADD_DESIRED_POINTS</definition>
        <argsstring>(LPCSTR mapped_name, float *desireds, float weight_pos)</argsstring>
        <name>ADD_DESIRED_POINTS</name>
        <param>
          <type>LPCSTR</type>
          <declname>mapped_name</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>desireds</declname>
        </param>
        <param>
          <type>float</type>
          <declname>weight_pos</declname>
        </param>
        <briefdescription>
<para>Adding desired points class from constructed points. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mapped_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of point </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>desireds</parametername>
</parameternamelist>
<parameterdescription>
<para>desired point </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>desired weight </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DLL_EXPORT </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="669" column="16" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="669" bodyend="680"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1a2f34ef7e12deaca0c4097592f5aaed15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT int</type>
        <definition>DLL_EXPORT int ADD_DESIRED_DIR</definition>
        <argsstring>(LPCSTR mapped_name, float *desireds_dir, float weight_dir)</argsstring>
        <name>ADD_DESIRED_DIR</name>
        <param>
          <type>LPCSTR</type>
          <declname>mapped_name</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>desireds_dir</declname>
        </param>
        <param>
          <type>float</type>
          <declname>weight_dir</declname>
        </param>
        <briefdescription>
<para>Adding desired direction class from constructed points. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mapped_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of point </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>desireds_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>desired direction </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>desired weight </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DLL_EXPORT </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="689" column="16" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="689" bodyend="699"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1ac67e55d7f47ab2db74e0133d516731bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT int</type>
        <definition>DLL_EXPORT int SET_DESIRED_POINTS</definition>
        <argsstring>(int i, float *desireds, float weight_pos)</argsstring>
        <name>SET_DESIRED_POINTS</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>desireds</declname>
        </param>
        <param>
          <type>float</type>
          <declname>weight_pos</declname>
        </param>
        <briefdescription>
<para>Set the desired points object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>desireds</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_pos</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DLL_EXPORT </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="708" column="16" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="708" bodyend="719"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1a285f4251b8f2554a2d1986e6b0a1e013" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT int</type>
        <definition>DLL_EXPORT int SET_DESIRED_DIRS</definition>
        <argsstring>(int i, float *des_dir, float weight_dir)</argsstring>
        <name>SET_DESIRED_DIRS</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>des_dir</declname>
        </param>
        <param>
          <type>float</type>
          <declname>weight_dir</declname>
        </param>
        <briefdescription>
<para>Set the desired dirs object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>des_dir</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight_dir</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DLL_EXPORT </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="728" column="16" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="728" bodyend="740"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1a771d4e32a1f7c021e701c4ca1e7e3eb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT int</type>
        <definition>DLL_EXPORT int INIT_DATA</definition>
        <argsstring>(int mbs_i, int Frames)</argsstring>
        <name>INIT_DATA</name>
        <param>
          <type>int</type>
          <declname>mbs_i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Frames</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="743" column="16" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="743" bodyend="755"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1a22e22f4c191e5173d5774425b91632b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT void</type>
        <definition>DLL_EXPORT void UPDATE_POSE_fromData</definition>
        <argsstring>(int mbs_i, int iter)</argsstring>
        <name>UPDATE_POSE_fromData</name>
        <param>
          <type>int</type>
          <declname>mbs_i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="756" column="17" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="756" bodyend="774"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1ae5aafe24303842c3ef7d34aa32560517" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT void</type>
        <definition>DLL_EXPORT void UPDATE_JOINTVEC</definition>
        <argsstring>(int mbs_i, int iter)</argsstring>
        <name>UPDATE_JOINTVEC</name>
        <param>
          <type>int</type>
          <declname>mbs_i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="775" column="17" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="775" bodyend="793"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1a9806ef54f642e9a732436e0846c75914" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT void</type>
        <definition>DLL_EXPORT void SAVE_BVH</definition>
        <argsstring>(LPCSTR bvh_file_path, int mbs_i, float frametime, float scale)</argsstring>
        <name>SAVE_BVH</name>
        <param>
          <type>LPCSTR</type>
          <declname>bvh_file_path</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mbs_i</declname>
        </param>
        <param>
          <type>float</type>
          <declname>frametime</declname>
        </param>
        <param>
          <type>float</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="796" column="17" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="796" bodyend="803"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1abd71ba39c8b13c51851fd46fb66eb2a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT void</type>
        <definition>DLL_EXPORT void UPDATE_BASE_POSITION_UnitytoMW</definition>
        <argsstring>(int mbs_i, float *input_pos)</argsstring>
        <name>UPDATE_BASE_POSITION_UnitytoMW</name>
        <param>
          <type>int</type>
          <declname>mbs_i</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>input_pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="806" column="17" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="806" bodyend="824"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1a3477d5897dced10db1cd96c44d650706" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT void</type>
        <definition>DLL_EXPORT void UPDATE_JOINT_QUATERNION_UnitytoMW</definition>
        <argsstring>(int mbs_i, int jointidx, float *input_Quat)</argsstring>
        <name>UPDATE_JOINT_QUATERNION_UnitytoMW</name>
        <param>
          <type>int</type>
          <declname>mbs_i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>jointidx</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>input_Quat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="826" column="17" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="826" bodyend="861"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1a749a2a7bd1072e59c89a1caf2b2939d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT void</type>
        <definition>DLL_EXPORT void UPDATE_POSE_UnitytoMW</definition>
        <argsstring>(int mbs_i, float *input_Pose)</argsstring>
        <name>UPDATE_POSE_UnitytoMW</name>
        <param>
          <type>int</type>
          <declname>mbs_i</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>input_Pose</declname>
        </param>
        <briefdescription>
<para>Updating pose of MBS by [given] pose array of Unity(LAMP) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mbs_i</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of MBS (0: source , 1: target, 2: processing) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input_Pose</parametername>
</parameternamelist>
<parameterdescription>
<para>pose array of Unity </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DLL_EXPORT </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="870" column="17" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="870" bodyend="935"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1ab9b89c2724bfcfd87c55eb1277bcc21f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT void</type>
        <definition>DLL_EXPORT void OUTPUT_JOINT_POSE_UNITY</definition>
        <argsstring>(int mbs_i, float *output_POSE)</argsstring>
        <name>OUTPUT_JOINT_POSE_UNITY</name>
        <param>
          <type>int</type>
          <declname>mbs_i</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>output_POSE</declname>
        </param>
        <briefdescription>
<para>Exporting pose array of Unity from current MBS pose. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mbs_i</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of MBS (0: source , 1: target, 2: processing) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output_POSE</parametername>
</parameternamelist>
<parameterdescription>
<para>pose array of Unity </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DLL_EXPORT </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="944" column="17" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="944" bodyend="1022"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1a6e3c3812bfbfa090a18d9950e1bb5587" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT void</type>
        <definition>DLL_EXPORT void UPDATE_JOINT_QUATERNION_UnitytoMW_usingName</definition>
        <argsstring>(LPCSTR jointname, float *input_Quat)</argsstring>
        <name>UPDATE_JOINT_QUATERNION_UnitytoMW_usingName</name>
        <param>
          <type>LPCSTR</type>
          <declname>jointname</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>input_Quat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="1027" column="17" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="1027" bodyend="1043"/>
      </memberdef>
      <memberdef kind="function" id="_m_b_s___c_d_l_l_8cpp_1ac932707f3180ec68c338c4ecc79ba68d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLL_EXPORT void</type>
        <definition>DLL_EXPORT void OUTPUT_JOINT_QUATERNION_UNITY</definition>
        <argsstring>(int jointindex, float *output_Quat)</argsstring>
        <name>OUTPUT_JOINT_QUATERNION_UNITY</name>
        <param>
          <type>int</type>
          <declname>jointindex</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>output_Quat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MBS_CDLL/MBS_CDLL.cpp" line="1045" column="17" bodyfile="MBS_CDLL/MBS_CDLL.cpp" bodystart="1045" bodyend="1064"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Windows.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;MBS/MBSLoader.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;saveBVH.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mgPoseTransfer_IK.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/><sp/>UNITY_MW_DLL_TEST_EXPORTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DLL_EXPORT<sp/>__declspec(dllexport)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DLL_EXPORT<sp/>__declspec(dllimport)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/><sp/>DLL_TEST_EXPORTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>DEBUG_DRAW_CONSTRAINT_SIZE<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="15"><highlight class="normal">gVec3<sp/>MW_GRAVITY_VECTOR(0,<sp/>-9.8,<sp/>0);</highlight></codeline>
<codeline lineno="16"><highlight class="normal">gVec3<sp/>MW_GROUND_NORMAL(0,<sp/>1,<sp/>0);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal">gMultibodySystem*<sp/>mbs;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//--<sp/>retarget<sp/>Xsense-&gt;Ybot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal">gMultibodySystem*<sp/>mbs_src;</highlight></codeline>
<codeline lineno="21"><highlight class="normal">gMultibodySystem*<sp/>mbs_tar;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><ref refid="classmg_pose_i_k_solver" kindref="compound">mgPoseIKSolver</ref>*<sp/>g_poseTrans_Avatar;<sp/></highlight><highlight class="comment">//<sp/>Ybot<sp/>-&gt;<sp/>Avatar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>srcFrameTime<sp/>=<sp/>30;</highlight></codeline>
<codeline lineno="26"><highlight class="normal">arma::mat<sp/>tarQuaternions;</highlight></codeline>
<codeline lineno="27"><highlight class="normal">arma::mat<sp/>g_refCoord;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><ref refid="classsave_b_v_h" kindref="compound">saveBVH</ref>*<sp/>g_saveBVH;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetJntRotDirOBJ(<ref refid="classmg_pose_i_k_solver" kindref="compound">mgPoseIKSolver</ref>*<sp/>poseTrans,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>txt_id,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>src_jnt,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>tar_jnt)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>poseTrans-&gt;<ref refid="classmg_pose_i_k_solver_1a80d769c6c908bfeb3e8f6034717dda21" kindref="member">addPoint</ref>(txt_id,<sp/>*poseTrans-&gt;<ref refid="classmg_pose_i_k_solver_1ab37785dad5215ed4835c298a80e04c03" kindref="member">src</ref>-&gt;findLink(src_jnt),<sp/>gVec3(0,<sp/>0,<sp/>0),<sp/>*poseTrans-&gt;tar-&gt;findLink(tar_jnt),<sp/>gVec3(0,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetJntRotDirOBJ(<ref refid="classmg_pose_i_k_solver" kindref="compound">mgPoseIKSolver</ref>*<sp/>poseTrans,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>txt_id,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>src_jnt,<sp/>gVec3<sp/>s_X,<sp/>gVec3<sp/>s_Z,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>tar_jnt,<sp/>gVec3<sp/>t_X,<sp/>gVec3<sp/>t_Z)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>gLink*<sp/>srcLink<sp/>=<sp/>poseTrans-&gt;<ref refid="classmg_pose_i_k_solver_1ab37785dad5215ed4835c298a80e04c03" kindref="member">src</ref>-&gt;findLink(src_jnt);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>gLink*<sp/>tarLink<sp/>=<sp/>poseTrans-&gt;tar-&gt;findLink(tar_jnt);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(srcLink<sp/>==<sp/>NULL<sp/>||<sp/>tarLink<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;you<sp/>should<sp/>check<sp/>joint<sp/>names&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>poseTrans-&gt;<ref refid="classmg_pose_i_k_solver_1a80d769c6c908bfeb3e8f6034717dda21" kindref="member">addPoint</ref>(txt_id,<sp/>*poseTrans-&gt;<ref refid="classmg_pose_i_k_solver_1ab37785dad5215ed4835c298a80e04c03" kindref="member">src</ref>-&gt;findLink(src_jnt),<sp/>gVec3(0,<sp/>0,<sp/>0),<sp/>*poseTrans-&gt;tar-&gt;findLink(tar_jnt),<sp/>gVec3(0,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>p_x[45];<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>p_z[45];<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>p_y[45];</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(p_x,<sp/>txt_id);<sp/>strcat(p_x,<sp/></highlight><highlight class="stringliteral">&quot;_x&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(p_y,<sp/>txt_id);<sp/>strcat(p_y,<sp/></highlight><highlight class="stringliteral">&quot;_y&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(p_z,<sp/>txt_id);<sp/>strcat(p_z,<sp/></highlight><highlight class="stringliteral">&quot;_z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//poseTrans-&gt;addPoint(p_x,<sp/>*poseTrans-&gt;src-&gt;findLink(src_jnt),<sp/>s_X,<sp/>*poseTrans-&gt;tar-&gt;findLink(tar_jnt),<sp/>t_X);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//poseTrans-&gt;addPoint(p_y,<sp/>*poseTrans-&gt;src-&gt;findLink(src_jnt),<sp/>gVec3(0,<sp/>1,<sp/>0),<sp/>*poseTrans-&gt;tar-&gt;findLink(tar_jnt),<sp/>gVec3(0,<sp/>1,<sp/>0));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//poseTrans-&gt;addPoint(p_z,<sp/>*poseTrans-&gt;src-&gt;findLink(src_jnt),<sp/>s_Z,<sp/>*poseTrans-&gt;tar-&gt;findLink(tar_jnt),<sp/>t_Z);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>poseTrans-&gt;<ref refid="classmg_pose_i_k_solver_1a80d769c6c908bfeb3e8f6034717dda21" kindref="member">addPoint</ref>(p_x,<sp/>*poseTrans-&gt;<ref refid="classmg_pose_i_k_solver_1ab37785dad5215ed4835c298a80e04c03" kindref="member">src</ref>-&gt;findLink(src_jnt),<sp/>poseTrans-&gt;<ref refid="classmg_pose_i_k_solver_1ab37785dad5215ed4835c298a80e04c03" kindref="member">src</ref>-&gt;findLink(src_jnt)-&gt;frame().rotX(),</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*poseTrans-&gt;tar-&gt;findLink(tar_jnt),<sp/>poseTrans-&gt;tar-&gt;findLink(tar_jnt)-&gt;frame().rotX());</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>poseTrans-&gt;<ref refid="classmg_pose_i_k_solver_1a80d769c6c908bfeb3e8f6034717dda21" kindref="member">addPoint</ref>(p_y,<sp/>*poseTrans-&gt;<ref refid="classmg_pose_i_k_solver_1ab37785dad5215ed4835c298a80e04c03" kindref="member">src</ref>-&gt;findLink(src_jnt),<sp/>poseTrans-&gt;<ref refid="classmg_pose_i_k_solver_1ab37785dad5215ed4835c298a80e04c03" kindref="member">src</ref>-&gt;findLink(src_jnt)-&gt;frame().rotY(),</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*poseTrans-&gt;tar-&gt;findLink(tar_jnt),<sp/>poseTrans-&gt;tar-&gt;findLink(tar_jnt)-&gt;frame().rotY());</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>poseTrans-&gt;<ref refid="classmg_pose_i_k_solver_1a80d769c6c908bfeb3e8f6034717dda21" kindref="member">addPoint</ref>(p_z,<sp/>*poseTrans-&gt;<ref refid="classmg_pose_i_k_solver_1ab37785dad5215ed4835c298a80e04c03" kindref="member">src</ref>-&gt;findLink(src_jnt),<sp/>poseTrans-&gt;<ref refid="classmg_pose_i_k_solver_1ab37785dad5215ed4835c298a80e04c03" kindref="member">src</ref>-&gt;findLink(src_jnt)-&gt;frame().rotZ(),</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*poseTrans-&gt;tar-&gt;findLink(tar_jnt),<sp/>poseTrans-&gt;tar-&gt;findLink(tar_jnt)-&gt;frame().rotZ());</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>poseTrans-&gt;<ref refid="classmg_pose_i_k_solver_1a6d9e089c0c3a3f105cc920254b2ca193" kindref="member">addDirectionObjective</ref>(txt_id,<sp/>p_x,<sp/>1.0);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>poseTrans-&gt;<ref refid="classmg_pose_i_k_solver_1a6d9e089c0c3a3f105cc920254b2ca193" kindref="member">addDirectionObjective</ref>(txt_id,<sp/>p_z,<sp/>1.0);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>poseTrans-&gt;<ref refid="classmg_pose_i_k_solver_1a6d9e089c0c3a3f105cc920254b2ca193" kindref="member">addDirectionObjective</ref>(txt_id,<sp/>p_y,<sp/>1.0);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetJntRotDirOBJ(<ref refid="classmg_pose_i_k_solver" kindref="compound">mgPoseIKSolver</ref>*<sp/>poseTrans,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>txt_id,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>src_jnt,<sp/>gVec3<sp/>s_X,<sp/>gVec3<sp/>s_Z,<sp/>gVec3<sp/>s_Y,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>tar_jnt,<sp/>gVec3<sp/>t_X,<sp/>gVec3<sp/>t_Z,<sp/>gVec3<sp/>t_Y)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>gLink*<sp/>srcLink<sp/>=<sp/>poseTrans-&gt;<ref refid="classmg_pose_i_k_solver_1ab37785dad5215ed4835c298a80e04c03" kindref="member">src</ref>-&gt;findLink(src_jnt);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>gLink*<sp/>tarLink<sp/>=<sp/>poseTrans-&gt;tar-&gt;findLink(tar_jnt);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(srcLink<sp/>==<sp/>NULL<sp/>||<sp/>tarLink<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;you<sp/>should<sp/>check<sp/>joint<sp/>names&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>poseTrans-&gt;<ref refid="classmg_pose_i_k_solver_1a80d769c6c908bfeb3e8f6034717dda21" kindref="member">addPoint</ref>(txt_id,<sp/>*poseTrans-&gt;<ref refid="classmg_pose_i_k_solver_1ab37785dad5215ed4835c298a80e04c03" kindref="member">src</ref>-&gt;findLink(src_jnt),<sp/>gVec3(0,<sp/>0,<sp/>0),<sp/>*poseTrans-&gt;tar-&gt;findLink(tar_jnt),<sp/>gVec3(0,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>p_x[45];<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>p_z[45];<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>p_y[45];</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(p_x,<sp/>txt_id);<sp/>strcat(p_x,<sp/></highlight><highlight class="stringliteral">&quot;_x&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(p_y,<sp/>txt_id);<sp/>strcat(p_y,<sp/></highlight><highlight class="stringliteral">&quot;_y&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(p_z,<sp/>txt_id);<sp/>strcat(p_z,<sp/></highlight><highlight class="stringliteral">&quot;_z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//poseTrans-&gt;addPoint(p_x,<sp/>*poseTrans-&gt;src-&gt;findLink(src_jnt),<sp/>s_X,<sp/>*poseTrans-&gt;tar-&gt;findLink(tar_jnt),<sp/>t_X);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//poseTrans-&gt;addPoint(p_y,<sp/>*poseTrans-&gt;src-&gt;findLink(src_jnt),<sp/>s_Y,<sp/>*poseTrans-&gt;tar-&gt;findLink(tar_jnt),<sp/>t_Y);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//poseTrans-&gt;addPoint(p_z,<sp/>*poseTrans-&gt;src-&gt;findLink(src_jnt),<sp/>s_Z,<sp/>*poseTrans-&gt;tar-&gt;findLink(tar_jnt),<sp/>t_Z);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gVec3<sp/>sj_pos<sp/>=<sp/>poseTrans-&gt;<ref refid="classmg_pose_i_k_solver_1ab37785dad5215ed4835c298a80e04c03" kindref="member">src</ref>-&gt;findLink(src_jnt)-&gt;frame().trn();</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gVec3<sp/>tj_pos<sp/>=<sp/>poseTrans-&gt;tar-&gt;findLink(tar_jnt)-&gt;frame().trn();</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>poseTrans-&gt;addPoint_inWorldOffset(p_x,<sp/>*poseTrans-&gt;<ref refid="classmg_pose_i_k_solver_1ab37785dad5215ed4835c298a80e04c03" kindref="member">src</ref>-&gt;findLink(src_jnt),<sp/>gVec3(sj_pos.x()<sp/>+<sp/>1,<sp/>sj_pos.y(),<sp/>sj_pos.z()),<sp/>*poseTrans-&gt;tar-&gt;findLink(tar_jnt),<sp/>gVec3(tj_pos.x()+1,<sp/>tj_pos.y(),<sp/>tj_pos.z()));</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>poseTrans-&gt;addPoint_inWorldOffset(p_y,<sp/>*poseTrans-&gt;<ref refid="classmg_pose_i_k_solver_1ab37785dad5215ed4835c298a80e04c03" kindref="member">src</ref>-&gt;findLink(src_jnt),<sp/>gVec3(sj_pos.x()<sp/>+<sp/>0,<sp/>sj_pos.y()+1,<sp/>sj_pos.z()),<sp/>*poseTrans-&gt;tar-&gt;findLink(tar_jnt),<sp/>gVec3(tj_pos.x()<sp/>+<sp/>0,<sp/>tj_pos.y()+1,<sp/>tj_pos.z()));</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>poseTrans-&gt;addPoint_inWorldOffset(p_z,<sp/>*poseTrans-&gt;<ref refid="classmg_pose_i_k_solver_1ab37785dad5215ed4835c298a80e04c03" kindref="member">src</ref>-&gt;findLink(src_jnt),<sp/>gVec3(sj_pos.x()<sp/>+<sp/>0,<sp/>sj_pos.y(),<sp/>sj_pos.z()+1),<sp/>*poseTrans-&gt;tar-&gt;findLink(tar_jnt),<sp/>gVec3(tj_pos.x()<sp/>+<sp/>0,<sp/>tj_pos.y(),<sp/>tj_pos.z()+1));</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>poseTrans-&gt;<ref refid="classmg_pose_i_k_solver_1a6d9e089c0c3a3f105cc920254b2ca193" kindref="member">addDirectionObjective</ref>(txt_id,<sp/>p_x,<sp/>1.0);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>poseTrans-&gt;<ref refid="classmg_pose_i_k_solver_1a6d9e089c0c3a3f105cc920254b2ca193" kindref="member">addDirectionObjective</ref>(txt_id,<sp/>p_z,<sp/>1.0);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>poseTrans-&gt;<ref refid="classmg_pose_i_k_solver_1a6d9e089c0c3a3f105cc920254b2ca193" kindref="member">addDirectionObjective</ref>(txt_id,<sp/>p_y,<sp/>1.0);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
<codeline lineno="91"><highlight class="normal">gRotMat<sp/>TranseRotUnitytoMW(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>z,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>w)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>gQuat<sp/>quat;<sp/>quat.set(x,y,z,w);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>gQuat<sp/>quat_rH<sp/>=<sp/>quat;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>gQuat<sp/>quat_lH;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//convert<sp/>righthand<sp/>quaternion<sp/>to<sp/>lefthand<sp/>quaternion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>quat_lH.setX(quat_rH.x());</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>quat_lH.setY(-1.0<sp/>*<sp/>quat_rH.y());</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>quat_lH.setZ(-1.0<sp/>*<sp/>quat_rH.z());</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>quat_lH.setW(quat_rH.w());</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*gRotMat<sp/>rot_LeftHanded<sp/>=<sp/>quat.inRotMatrix();</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/><sp/><sp/><sp/>gRotMat<sp/>rot_RightHanded;</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/><sp/><sp/><sp/>double*<sp/>convert_L2R<sp/>=<sp/>new<sp/>double[9];</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/><sp/><sp/><sp/>convert_L2R[0]<sp/>=<sp/>rot_LeftHanded.e(0);<sp/><sp/><sp/><sp/>convert_L2R[3]<sp/>=<sp/>-1<sp/>*<sp/>rot_LeftHanded.e(3);<sp/>convert_L2R[6]<sp/>=<sp/>-1<sp/>*<sp/>rot_LeftHanded.e(6);</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/><sp/><sp/><sp/>convert_L2R[1]<sp/>=<sp/>-1<sp/>*<sp/>rot_LeftHanded.e(1);<sp/>convert_L2R[4]<sp/>=<sp/>rot_LeftHanded.e(4);<sp/><sp/><sp/><sp/>convert_L2R[7]<sp/>=<sp/>rot_LeftHanded.e(7);</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/><sp/><sp/><sp/>convert_L2R[2]<sp/>=<sp/>-1<sp/>*<sp/>rot_LeftHanded.e(2);<sp/>convert_L2R[5]<sp/>=<sp/>rot_LeftHanded.e(5);<sp/><sp/><sp/><sp/>convert_L2R[8]<sp/>=<sp/>rot_LeftHanded.e(8);</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/><sp/><sp/><sp/>rot_RightHanded.set(convert_L2R);*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>quat_lH.inRotMatrix();</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal">{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>MBS<sp/>CDLL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>generate<sp/>the<sp/>MBS<sp/>File</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GEN_MBS_TXTFILE(LPCSTR<sp/>tarCharacterMotionFile,<sp/>LPCSTR<sp/>tarCharactertxt)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MotionLoader<sp/>loader;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loader.loadMotionFile(tarCharacterMotionFile);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mgData*<sp/>motion<sp/>=<sp/>loader.getMotion();</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mgSkeleton*<sp/>skeleton<sp/>=<sp/>loader.getSkeleton();</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>srcFrameTime<sp/>=<sp/>motion-&gt;frameTime;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;|---<sp/>load<sp/>src<sp/>character<sp/>file<sp/>---|&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mgSkeletonToBCharacter::saveToBCharacter(skeleton,<sp/>tarCharactertxt,<sp/>70.0);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(0:<sp/>src,<sp/>1<sp/>:<sp/>tar,<sp/>2<sp/>:<sp/>IK)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>specific<sp/>MBS<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UPDATE_MBS(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mbs_i)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mbs_i<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs_src-&gt;updateKinematicsUptoPos();</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mbs_i<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs_tar-&gt;updateKinematicsUptoPos();</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mbs_i<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs-&gt;updateKinematicsUptoPos();</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>pose<sp/>of<sp/>MBS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SET_MBS_FromEXP(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mbs_i,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>joint_vec)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mbs_i<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>float<sp/>�迭��<sp/>arma::vec��<sp/>����</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndof<sp/>=<sp/>mbs_src-&gt;numLinks()<sp/>*<sp/>3<sp/>+<sp/>3;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arma::vec<sp/>lca;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lca.set_size(ndof);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::memcpy(lca.memptr(),<sp/>joint_vec,<sp/>ndof);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs_src-&gt;setFromCompactCoordArray(lca);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mbs_i<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>float<sp/>�迭��<sp/>arma::vec��<sp/>����</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndof<sp/>=<sp/>mbs_tar-&gt;numLinks()<sp/>*<sp/>3<sp/>+<sp/>3;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arma::vec<sp/>lca;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lca.set_size(ndof);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::memcpy(lca.memptr(),<sp/>joint_vec,<sp/>ndof);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs_tar-&gt;setFromCompactCoordArray(lca);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mbs_i<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>float<sp/>�迭��<sp/>arma::vec��<sp/>����</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndof<sp/>=<sp/>mbs-&gt;numLinks()<sp/>*<sp/>3<sp/>+<sp/>3;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arma::vec<sp/>lca;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lca.set_size(ndof);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::memcpy(lca.memptr(),<sp/>joint_vec,<sp/>ndof);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs-&gt;setFromCompactCoordArray(lca);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SET_MBS_JOINT_FromEXP(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>joint_id,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>joint_vec)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gRotMat<sp/>rot;<sp/>rot.makeExp(gVec3(joint_vec[0],<sp/>joint_vec[1],<sp/>joint_vec[2]));</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs-&gt;link(joint_id)-&gt;setFromCompactCoordArray(rot.cptr());</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SET_MBS_JOINT_FromQuat(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>joint_id,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>joint_vec)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gQuat<sp/>quat;<sp/>quat.set(joint_vec[0],<sp/>joint_vec[1],<sp/>joint_vec[2],<sp/>joint_vec[3]);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gXMat<sp/>mat_G<sp/>=<sp/>mbs-&gt;link(joint_id)-&gt;localFrame();</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat_G.setRot(quat.inRotMatrix());</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs-&gt;link(joint_id)-&gt;setFromCompactCoordArray(mat_G.rotInQuat().cptr());</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>pose<sp/>of<sp/>MBS<sp/>(float*)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>READ_MBS_POSE(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mbs_i)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mbs_i<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>mbs<sp/>dof<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>mbs_src-&gt;dof()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arma::vec<sp/>lca(mbs_src-&gt;dof());</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs_src-&gt;getCompactCoordArray(lca);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>data<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">[mbs_src-&gt;dof()];</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mbs_src-&gt;dof();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data[i]<sp/>=<sp/>lca[i];</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;<sp/>lca<sp/>&quot;<sp/>&lt;&lt;<sp/>lca<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mbs_i<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>mbs<sp/>dof<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>mbs_tar-&gt;dof()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arma::vec<sp/>lca(mbs_tar-&gt;dof());</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs_tar-&gt;getCompactCoordArray(lca);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>data<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">[mbs_tar-&gt;dof()];</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mbs_tar-&gt;dof();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data[i]<sp/>=<sp/>lca[i];</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;<sp/>lca<sp/>&quot;<sp/>&lt;&lt;<sp/>lca<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mbs_i<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>mbs<sp/>dof<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>mbs-&gt;dof()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arma::vec<sp/>lca(mbs-&gt;dof());</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs-&gt;getCompactCoordArray(lca);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>data<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">[mbs-&gt;dof()];</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mbs-&gt;dof();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data[i]<sp/>=<sp/>lca[i];</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;<sp/>lca<sp/>&quot;<sp/>&lt;&lt;<sp/>lca<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>position<sp/>of<sp/>MBS<sp/>(float*)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>READ_MBS_JOINT_POSITION(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mbs_i,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>joint_id)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>data[]<sp/>=<sp/>{<sp/>9.20f,<sp/>2.19f,<sp/>11.23f<sp/>};</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mbs_i<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gVec3<sp/>trn<sp/>=<sp/>mbs_src-&gt;link(joint_id)-&gt;frame().trn();</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;<sp/>hi<sp/>&quot;<sp/>&lt;&lt;<sp/>trn<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data[0]<sp/>=<sp/>trn.x();<sp/>data[1]<sp/>=<sp/>trn.y();<sp/>data[2]<sp/>=<sp/>trn.z();</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mbs_i<sp/>==1)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gVec3<sp/>trn<sp/>=<sp/>mbs_tar-&gt;link(joint_id)-&gt;frame().trn();</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;<sp/>hi<sp/>&quot;<sp/>&lt;&lt;<sp/>trn<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data[0]<sp/>=<sp/>trn.x();<sp/>data[1]<sp/>=<sp/>trn.y();<sp/>data[2]<sp/>=<sp/>trn.z();</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mbs_i<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gVec3<sp/>trn<sp/>=<sp/>mbs-&gt;link(joint_id)-&gt;frame().trn();</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;<sp/>hi<sp/>&quot;<sp/>&lt;&lt;<sp/>trn<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data[0]<sp/>=<sp/>trn.x();<sp/>data[1]<sp/>=<sp/>trn.y();<sp/>data[2]<sp/>=<sp/>trn.z();</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>READ_MBS_JOINT_WORLD_QUAT(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>joint_id)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>data[]<sp/>=<sp/>{<sp/>9.20f,<sp/>2.19f,<sp/>11.23f<sp/>,<sp/>25.61f<sp/>};</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gQuat<sp/>quat<sp/>=<sp/><sp/>mbs-&gt;link(joint_id)-&gt;frame().rot().inQuat();</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data[0]<sp/>=<sp/>quat.x();<sp/>data[1]<sp/>=<sp/>quat.y();<sp/>data[2]<sp/>=<sp/>quat.z();<sp/>data[3]<sp/>=<sp/>quat.w();</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>READ_MBS_JOINT_LOCAL_QUAT(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>joint_id)<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>data[]<sp/>=<sp/>{<sp/>9.20f,<sp/>2.19f,<sp/>11.23f<sp/>,<sp/>25.61f<sp/>};</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gQuat<sp/>quat<sp/>=<sp/>mbs-&gt;link(joint_id)-&gt;localFrame().rot().inQuat();</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data[0]<sp/>=<sp/>quat.x();<sp/>data[1]<sp/>=<sp/>quat.y();<sp/>data[2]<sp/>=<sp/>quat.z();<sp/>data[3]<sp/>=<sp/>quat.w();</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>name<sp/>of<sp/>Joint<sp/>(string)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/>LPCSTR<sp/>READ_JOINTNAME(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPCSTR<sp/>joint_name<sp/>=<sp/>mbs-&gt;link(i)-&gt;name();</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>joint_name;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Retarget<sp/>CDLL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>LOAD_SRC_TAR_MBS(LPCSTR<sp/>chaSrcTXTFile,<sp/>LPCSTR<sp/>chaTarTXTFile)<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MBSLoader<sp/>tar_loader;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs_src<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>gMultibodySystem();</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tar_loader.loadModelUnity(chaSrcTXTFile,<sp/>mbs_src,<sp/>1.0);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>mbs_src-&gt;numLinks();<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>joint<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>mbs_src-&gt;link(j)-&gt;name()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>world<sp/>position<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>mbs_src-&gt;link(j)-&gt;frame().trn()<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>x<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>mbs_src-&gt;link(j)-&gt;frame().rotX()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>y<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>mbs_src-&gt;link(j)-&gt;frame().rotY()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>z<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>mbs_src-&gt;link(j)-&gt;frame().rotZ()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs_tar<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>gMultibodySystem();</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tar_loader.loadModelUnity(chaTarTXTFile,<sp/>mbs_tar,<sp/>1.0);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>mbs_tar-&gt;numLinks();<sp/>j++)</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>joint<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>mbs_tar-&gt;link(j)-&gt;name()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>world<sp/>position<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>mbs_tar-&gt;link(j)-&gt;frame().trn()<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>x<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>mbs_tar-&gt;link(j)-&gt;frame().rotX()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>y<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>mbs_tar-&gt;link(j)-&gt;frame().rotY()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>z<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>mbs_tar-&gt;link(j)-&gt;frame().rotZ()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;<sp/>joint<sp/>&quot;<sp/>&lt;&lt;<sp/>src-&gt;link(j)-&gt;name()<sp/>&lt;&lt;<sp/>&quot;<sp/>x<sp/>&quot;<sp/>&lt;&lt;<sp/>src-&gt;link(j)-&gt;frame().rotX()<sp/>&lt;&lt;<sp/>&quot;<sp/>y<sp/>&quot;<sp/>&lt;&lt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>src-&gt;link(j)-&gt;frame().rotY()<sp/>&lt;&lt;<sp/>&quot;<sp/>z<sp/>&quot;<sp/>&lt;&lt;<sp/>src-&gt;link(j)-&gt;frame().rotZ()<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mbs_src-&gt;numLinks();</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>INIT_RETARGET()<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//tarQuaternions<sp/>=<sp/>arma::mat(mbs_tar-&gt;sizeSafeCoordArray(),<sp/>Frames,<sp/>arma::fill::zeros);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_poseTrans_Avatar<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classmg_pose_i_k_solver" kindref="compound">mgPoseIKSolver</ref>(mbs_src,<sp/>mbs_tar);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_poseTrans_Avatar-&gt;scale<sp/>=<sp/>mbs_tar-&gt;link(0)-&gt;frame().trn().y()<sp/>/<sp/>mbs_src-&gt;link(0)-&gt;frame().trn().y();</highlight><highlight class="comment">//1.0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>scale<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>g_poseTrans_Avatar-&gt;scale<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g_poseTrans_Avatar-&gt;tar-&gt;numLinks();</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>LOAD_SRC_MOTION(LPCSTR<sp/>srcfilename,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>src_scale)<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;|---<sp/>load<sp/>src<sp/>motion<sp/>file<sp/>---|&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>src<sp/>motion<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MotionLoader<sp/>loader;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loader.setTranslateScale(src_scale);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loader.loadMotionFile(srcfilename);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mgData*<sp/>motion<sp/>=<sp/>loader.getMotion();</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mgSkeleton*<sp/>skeleton<sp/>=<sp/>loader.getSkeleton();</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>srcFrameTime<sp/>=<sp/>motion-&gt;frameTime;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;|---<sp/>load<sp/>src<sp/>motion<sp/>file<sp/>---|&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>load<sp/>src<sp/>motion<sp/>(pose<sp/>sequence)<sp/>:<sp/>nMotion<sp/>is<sp/>a<sp/>total<sp/>number<sp/>of<sp/>frame<sp/>for<sp/>motion<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arma::mat<sp/>refCoord(mbs_src-&gt;sizeCompactCoordArray(),<sp/>motion-&gt;nMotion,<sp/>arma::fill::zeros);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>f<sp/>=<sp/>0;<sp/>f<sp/>&lt;<sp/>motion-&gt;nMotion;<sp/>f++)</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arma::vec<sp/>coord;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mgMBSUtil::getCoordArrayFromRawData(</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coord,</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs_src,</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skeleton,</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>motion-&gt;motions[f]</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//refCoord.col(f)<sp/>=<sp/>coord;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>refCoord.submat(0,<sp/>f,<sp/>arma::SizeMat(coord.n_elem,<sp/>1))<sp/>=<sp/>coord;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_refCoord<sp/>=<sp/>refCoord;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>rows:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>g_refCoord.n_rows<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cols:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>g_refCoord.n_cols<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g_refCoord.n_cols;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>READ_TOTALFRAMES()<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g_refCoord.n_cols;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>READ_FrameTime()<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>srcFrameTime;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Mapping<sp/>Joints<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>INIT_MAPPING_fromTXT(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>txtfile)<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ifstream<sp/>inFile(txtfile);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!inFile)<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unable<sp/>to<sp/>open<sp/>file<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numLines<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>line;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;float&gt;<sp/>ee_ind;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(getline(inFile,<sp/>line))<sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss(line);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>data;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>element;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ss<sp/>&gt;&gt;<sp/>element)<sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data.push_back(element);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ind<sp/>=<sp/>std::stof(data[0]);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ee_ind.push_back(ind);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>output<sp/>string<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>oss;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>the<sp/>string<sp/>and<sp/>float<sp/>to<sp/>the<sp/>output<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;j&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>numLines;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>resulting<sp/>string<sp/>from<sp/>the<sp/>output<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>result<sp/>=<sp/>oss.str();</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>charPtr<sp/>=<sp/>result.c_str();</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>a<sp/>buffer<sp/>for<sp/>the<sp/>char*<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buffer<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[result.length()<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::strcpy(buffer,<sp/>charPtr);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;<sp/>buffer<sp/>&quot;<sp/>&lt;&lt;<sp/>buffer<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//chain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//SetJntRotDirOBJ(g_poseTrans_Avatar,<sp/>buffer,<sp/>(char*)data[1].c_str(),<sp/>(char*)data[2].c_str());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ind<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gVec3<sp/>srcX(std::stof(data[3]),<sp/>std::stof(data[4]),<sp/>std::stof(data[5]));</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gVec3<sp/>tarX(std::stof(data[6]),<sp/>std::stof(data[7]),<sp/>std::stof(data[8]));</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gVec3<sp/>srcY(std::stof(data[9]),<sp/>std::stof(data[10]),<sp/>std::stof(data[11]));</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gVec3<sp/>tarY(std::stof(data[12]),<sp/>std::stof(data[13]),<sp/>std::stof(data[14]));</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gVec3<sp/>srcZ(std::stof(data[15]),<sp/>std::stof(data[16]),<sp/>std::stof(data[17]));</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gVec3<sp/>tarZ(std::stof(data[18]),<sp/>std::stof(data[19]),<sp/>std::stof(data[20]));</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetJntRotDirOBJ(g_poseTrans_Avatar,<sp/>buffer,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)data[1].c_str(),<sp/>srcX,<sp/>srcZ,<sp/>srcY,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)data[2].c_str(),<sp/>tarX,<sp/>tarZ,<sp/>tarY);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetJntRotDirOBJ(g_poseTrans_Avatar,<sp/>buffer,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)data[1].c_str(),<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)data[2].c_str());</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numLines++;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ee_ind.size()<sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>output<sp/>string<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>oss;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>the<sp/>string<sp/>and<sp/>float<sp/>to<sp/>the<sp/>output<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;j&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>oss2;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>the<sp/>string<sp/>and<sp/>float<sp/>to<sp/>the<sp/>output<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oss2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;j&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ee_ind[i]<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_poseTrans_Avatar-&gt;<ref refid="classmg_pose_i_k_solver_1a6d9e089c0c3a3f105cc920254b2ca193" kindref="member">addDirectionObjective</ref>(oss.str().c_str(),<sp/>oss2.str().c_str(),<sp/>1.0);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//pelvis<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_poseTrans_Avatar-&gt;addDesiredObjective(</highlight><highlight class="stringliteral">&quot;j0&quot;</highlight><highlight class="normal">,<sp/>10.0,<sp/>gVec3(0,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Close<sp/>the<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inFile.close();</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MAPPING_JOINTS(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>mapped_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>src_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>tar_name)<sp/>{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//g_poseTrans_Avatar-&gt;addPoint(mapped_name,<sp/>*g_poseTrans_Avatar-&gt;src-&gt;findLink(src_name),<sp/>gVec3(0,<sp/>0,<sp/>0),<sp/>*g_poseTrans_Avatar-&gt;tar-&gt;findLink(tar_name),<sp/>gVec3(0,<sp/>0,<sp/>0));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetJntRotDirOBJ(g_poseTrans_Avatar,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)mapped_name,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)src_name,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)tar_name);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>(char*)src_name<sp/>&lt;&lt;<sp/>(char*)tar_name<sp/>&lt;&lt;<sp/>&quot;<sp/>tarpoints<sp/>&quot;<sp/>&lt;&lt;<sp/>g_poseTrans_Avatar-&gt;tarPoints[0].body()<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout&lt;&lt;&quot;<sp/>tarpoints<sp/>&quot;<sp/>&lt;&lt;<sp/>g_poseTrans_Avatar-&gt;tarPoints[0].body()<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//g_poseTrans_Avatar-&gt;tarPoints[0].updateKinematicsUptoPos();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g_poseTrans_Avatar-&gt;tarPoints.size();</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MAPPING_JOINTS_withAXIS(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>mapped_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>src_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>tar_name,</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gVec3<sp/>g_src_X,<sp/>gVec3<sp/>g_src_Y,<sp/>gVec3<sp/>g_src_Z,</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gVec3<sp/>g_tar_X,<sp/>gVec3<sp/>g_tar_Y,<sp/>gVec3<sp/>g_tar_Z)<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//g_poseTrans_Avatar-&gt;addPoint(mapped_name,<sp/>*g_poseTrans_Avatar-&gt;src-&gt;findLink(src_name),<sp/>gVec3(0,<sp/>0,<sp/>0),<sp/>*g_poseTrans_Avatar-&gt;tar-&gt;findLink(tar_name),<sp/>gVec3(0,<sp/>0,<sp/>0));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//SetJntRotDirOBJ(g_poseTrans_Avatar,<sp/>(char*)mapped_name,<sp/>(char*)src_name,<sp/>(char*)tar_name);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gVec3<sp/>src_x<sp/>=<sp/>mbs_src-&gt;findLink((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)src_name)-&gt;frame().rotX();</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gVec3<sp/>src_y<sp/>=<sp/>mbs_src-&gt;findLink((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)src_name)-&gt;frame().rotY();</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gVec3<sp/>src_z<sp/>=<sp/>mbs_src-&gt;findLink((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)src_name)-&gt;frame().rotZ();</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>(char*)src_name<sp/>&lt;&lt;<sp/>(char*)tar_name<sp/>&lt;&lt;<sp/>&quot;<sp/>src_x<sp/>&quot;<sp/>&lt;&lt;<sp/><sp/>src_x<sp/>&lt;&lt;<sp/>&quot;<sp/>tar<sp/>rot<sp/>x<sp/>&quot;<sp/>&lt;&lt;<sp/>mat_tar.rotX()<sp/>&lt;&lt;<sp/>&quot;<sp/>tar_x&quot;<sp/>&lt;&lt;<sp/>mat_tar.invMultVec3(src_x)<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>(char*)src_name<sp/>&lt;&lt;<sp/>(char*)tar_name<sp/>&lt;&lt;<sp/>&quot;<sp/>src_y<sp/>&quot;<sp/>&lt;&lt;<sp/>src_y<sp/>&lt;&lt;<sp/>mat_tar.invMultVec3(src_y)<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>(char*)src_name<sp/>&lt;&lt;<sp/>(char*)tar_name<sp/>&lt;&lt;<sp/>&quot;<sp/>src_z<sp/>&quot;<sp/>&lt;&lt;<sp/>src_z<sp/>&lt;&lt;<sp/>mat_tar.invMultVec3(src_z)<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetJntRotDirOBJ(g_poseTrans_Avatar,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)mapped_name,</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)src_name,<sp/>g_src_X,<sp/>g_src_Z,<sp/>g_src_Y,</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)tar_name,<sp/>g_tar_X,<sp/>g_tar_Z,<sp/>g_tar_Y);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>(char*)src_name<sp/>&lt;&lt;<sp/>(char*)tar_name<sp/>&lt;&lt;<sp/>&quot;<sp/>tarpoints<sp/>&quot;<sp/>&lt;&lt;<sp/>g_poseTrans_Avatar-&gt;tarPoints[0].body()<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout&lt;&lt;&quot;<sp/>tarpoints<sp/>&quot;<sp/>&lt;&lt;<sp/>g_poseTrans_Avatar-&gt;tarPoints[0].body()<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//g_poseTrans_Avatar-&gt;tarPoints[0].updateKinematicsUptoPos();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g_poseTrans_Avatar-&gt;tarPoints.size();</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MAPPING_DIRS(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>j_start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>j_to,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>weightDir)<sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//direction<sp/>objectives</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_poseTrans_Avatar-&gt;<ref refid="classmg_pose_i_k_solver_1a6d9e089c0c3a3f105cc920254b2ca193" kindref="member">addDirectionObjective</ref>(j_start,<sp/>j_to,<sp/>weightDir);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>directions<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>g_poseTrans_Avatar-&gt;directions.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>WEIGHT<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>weightDir<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j_start<sp/>&lt;&lt;<sp/>j_to<sp/>&lt;&lt;<sp/>g_poseTrans_Avatar-&gt;namePoints[0]<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MAPPING_POS(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>j_to,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>weightPos)<sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//pelvis<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_poseTrans_Avatar-&gt;addDesiredObjective(j_to,<sp/>weightPos,<sp/>gVec3(0,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Retargeting<sp/>Using<sp/>C++<sp/>LEVMAR<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DO_RETARGET_OUTPUT(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x_offset,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y_offset,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>z_offset)<sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_poseTrans_Avatar-&gt;<ref refid="classmg_pose_i_k_solver_1ab37785dad5215ed4835c298a80e04c03" kindref="member">src</ref>-&gt;updateKinematicsUptoPos();</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>desired<sp/>positions<sp/>update</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>0;<sp/>p<sp/>&lt;<sp/>g_poseTrans_Avatar-&gt;srcPoints.size();<sp/>p++)<sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_poseTrans_Avatar-&gt;tarPoints[p].updateKinematicsUptoPos();</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_poseTrans_Avatar-&gt;srcPoints[p].updateKinematicsUptoPos();</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//motion<sp/>retargeting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_poseTrans_Avatar-&gt;desiredPoints[0].pos_desired<sp/>=<sp/>g_poseTrans_Avatar-&gt;scale<sp/>*<sp/>g_poseTrans_Avatar-&gt;<ref refid="classmg_pose_i_k_solver_1ab37785dad5215ed4835c298a80e04c03" kindref="member">src</ref>-&gt;link(0)-&gt;frame().trn();<sp/></highlight><highlight class="comment">//g_poseTrans-&gt;scale</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;<sp/>let&apos;s<sp/>retarget<sp/>&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gXMat<sp/>offset;<sp/>offset.setTrn(0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_poseTrans_Avatar-&gt;<ref refid="classmg_pose_i_k_solver_1a118bd115fb401575aa52ff38b7114031" kindref="member">transferPoseLevMar</ref>(offset);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_poseTrans_Avatar-&gt;tar-&gt;updateKinematicsUptoPos();</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gVec3<sp/>new_pelvis<sp/>=<sp/>g_poseTrans_Avatar-&gt;tar-&gt;link(0)-&gt;frame().trn();</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_pelvis.setX(new_pelvis.x()<sp/>+<sp/>x_offset);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_pelvis.setY(new_pelvis.y()<sp/>+<sp/>y_offset);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_pelvis.setZ(new_pelvis.z()<sp/>+<sp/>z_offset);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_poseTrans_Avatar-&gt;tar-&gt;setBasePosition(new_pelvis);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_poseTrans_Avatar-&gt;tar-&gt;updateKinematicsUptoPos();</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Retargeting<sp/>Functions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UPDATE_SRC_POINTS()<sp/>{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>g_poseTrans_Avatar-&gt;srcPoints.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_poseTrans_Avatar-&gt;srcPoints[i].updateKinematicsUptoPos();</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>READ_SRC_POINTS(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>joint_id)<sp/>{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>data[]<sp/>=<sp/>{<sp/>9.20f,<sp/>2.19f,<sp/>11.23f<sp/>};</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gVec3<sp/>trn<sp/>=<sp/>g_poseTrans_Avatar-&gt;srcPoints[joint_id].posWorld();</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;<sp/>hi<sp/>&quot;<sp/>&lt;&lt;<sp/>trn<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data[0]<sp/>=<sp/>trn.x();<sp/>data[1]<sp/>=<sp/>trn.y();<sp/>data[2]<sp/>=<sp/>trn.z();</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UPDATE_TAR_POINTS()<sp/>{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>g_poseTrans_Avatar-&gt;tarPoints.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_poseTrans_Avatar-&gt;tarPoints[i].updateKinematicsUptoPos();</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>READ_TAR_POINTS(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>joint_id)<sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>data[]<sp/>=<sp/>{<sp/>9.20f,<sp/>2.19f,<sp/>11.23f<sp/>};</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gVec3<sp/>trn<sp/>=<sp/>g_poseTrans_Avatar-&gt;tarPoints[joint_id].posWorld();</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;<sp/>hi<sp/>&quot;<sp/>&lt;&lt;<sp/>trn<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data[0]<sp/>=<sp/>trn.x();<sp/>data[1]<sp/>=<sp/>trn.y();<sp/>data[2]<sp/>=<sp/>trn.z();</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SRC_STORECOORD()<sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs_src-&gt;storeCoord();</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SRC_RESTORECOORD()<sp/>{</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs_src-&gt;restoreCoord();</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SET_DESIRED_BASE(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>base)<sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_poseTrans_Avatar-&gt;desiredPoints[0].pos_desired<sp/>=<sp/>g_poseTrans_Avatar-&gt;scale<sp/>*<sp/>g_poseTrans_Avatar-&gt;<ref refid="classmg_pose_i_k_solver_1ab37785dad5215ed4835c298a80e04c03" kindref="member">src</ref>-&gt;link(0)-&gt;frame().trn();<sp/></highlight><highlight class="comment">//g_poseTrans-&gt;scale</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>READ_DIRECTION_SIZE()<sp/>{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g_poseTrans_Avatar-&gt;directions.size();</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GET_DIRECTIONS(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>idx0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>idx1)<sp/>{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*idx0<sp/>=<sp/>g_poseTrans_Avatar-&gt;directions[i].idx0;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*idx1<sp/>=<sp/>g_poseTrans_Avatar-&gt;directions[i].idx1;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>MEASURE_DIRECTION(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx1)<sp/>{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gVec3<sp/>dirSrc<sp/>=<sp/>g_poseTrans_Avatar-&gt;srcPoints[idx1].posWorld()<sp/>-<sp/>g_poseTrans_Avatar-&gt;srcPoints[idx0].posWorld();</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gVec3<sp/>dirTar<sp/>=<sp/>g_poseTrans_Avatar-&gt;tarPoints[idx1].posWorld()<sp/>-<sp/>g_poseTrans_Avatar-&gt;tarPoints[idx0].posWorld();</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dirSrc.normalize();</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dirTar.normalize();</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gVec3<sp/>del<sp/>=<sp/>dirSrc<sp/>-<sp/>dirTar;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>data[]<sp/>=<sp/>{<sp/>9.20f,<sp/>2.19f,<sp/>11.23f<sp/>};</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data[0]<sp/>=<sp/>del.x();<sp/>data[1]<sp/>=<sp/>del.y();<sp/>data[2]<sp/>=<sp/>del.z();</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>MEASURE_POSITION(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx0,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>desPoints)</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gVec3<sp/>posTar<sp/>=<sp/>g_poseTrans_Avatar-&gt;tarPoints[idx0].posWorld();</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gVec3<sp/>del<sp/>=<sp/>posTar<sp/>-<sp/>gVec3(desPoints[0],desPoints[1],desPoints[2]);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>data[]<sp/>=<sp/>{<sp/>9.20f,<sp/>2.19f,<sp/>11.23f<sp/>};</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data[0]<sp/>=<sp/>del.x();<sp/>data[1]<sp/>=<sp/>del.y();<sp/>data[2]<sp/>=<sp/>del.z();</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Desired<sp/>IK<sp/>Using<sp/>C++<sp/>LEVMAR<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>load<sp/>input<sp/>MBS<sp/>Data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>LOAD_MBS(LPCSTR<sp/>chaSrcTXTFile)<sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MBSLoader<sp/>tar_loader;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>gMultibodySystem();</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tar_loader.loadModelUnity(chaSrcTXTFile,<sp/>mbs,<sp/>1.0);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>mbs-&gt;numLinks();<sp/>j++)</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>mbs-&gt;link(j)-&gt;name()<sp/>&lt;&lt;<sp/>mbs-&gt;link(j)-&gt;frame().trn()<sp/>&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;<sp/>joint<sp/>&quot;<sp/>&lt;&lt;<sp/>src-&gt;link(j)-&gt;name()<sp/>&lt;&lt;<sp/>&quot;<sp/>x<sp/>&quot;<sp/>&lt;&lt;<sp/>src-&gt;link(j)-&gt;frame().rotX()<sp/>&lt;&lt;<sp/>&quot;<sp/>y<sp/>&quot;<sp/>&lt;&lt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>src-&gt;link(j)-&gt;frame().rotY()<sp/>&lt;&lt;<sp/>&quot;<sp/>z<sp/>&quot;<sp/>&lt;&lt;<sp/>src-&gt;link(j)-&gt;frame().rotZ()<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mbs-&gt;numLinks();</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DO_POSE_IK()<sp/>{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gXMat<sp/>offset;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs-&gt;updateKinematicsUptoPos();</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_poseTrans_Avatar-&gt;DesiredLevMar(offset);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arma::vec<sp/>lca(mbs-&gt;dof());</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs-&gt;getCompactCoordArray(lca);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs-&gt;setFromCompactCoordArray(lca);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs-&gt;updateKinematicsUptoPos();</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*for<sp/>(int<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>mbs-&gt;numLinks();<sp/>j++)</highlight></codeline>
<codeline lineno="613"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>mbs-&gt;link(j)-&gt;name()<sp/>&lt;&lt;<sp/>mbs-&gt;link(j)-&gt;frame().trn()<sp/>&lt;&lt;<sp/>std::endl;*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_poseTrans_Avatar-&gt;tar-&gt;updateKinematicsUptoPos();</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>INIT_IK()<sp/>{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_poseTrans_Avatar<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classmg_pose_i_k_solver" kindref="compound">mgPoseIKSolver</ref>(mbs,<sp/>mbs);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mbs-&gt;numLinks();</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/>LPCSTR<sp/>INIT_JOINT_LIST(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPCSTR<sp/>joint_name<sp/>=<sp/>mbs-&gt;link(i)-&gt;name();</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>joint_name;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SETUP_DES_DIR_JOINTS(LPCSTR<sp/>mapped_name,<sp/>LPCSTR<sp/>joint_name)<sp/>{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_poseTrans_Avatar-&gt;addDesiredJoint(mapped_name,<sp/>*mbs-&gt;findLink(joint_name),<sp/>gVec3(0,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g_poseTrans_Avatar-&gt;tarPoints.size();</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SETTING_DESDIRJOINTS(LPCSTR<sp/>mapped_name,<sp/>LPCSTR<sp/>src_name)<sp/>{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_poseTrans_Avatar-&gt;addDesiredJointPoseDir(mapped_name,<sp/>*mbs-&gt;findLink(src_name),<sp/>gVec3(0,<sp/>0,<sp/>0),</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*mbs-&gt;findLink(src_name)-&gt;parent(),<sp/>gVec3(0,<sp/>0,<sp/>0));</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g_poseTrans_Avatar-&gt;tarPoints.size();</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ADD_DESIRED_POINTS(LPCSTR<sp/>mapped_name,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>desireds,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>weight_pos)<sp/>{</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gVec3<sp/>point;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point.setX(-1<sp/>*<sp/>desireds[0]);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point.setY(desireds[1]);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point.setZ(desireds[2]);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_poseTrans_Avatar-&gt;addDesiredObjective(mapped_name,<sp/>weight_pos,<sp/>point);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g_poseTrans_Avatar-&gt;desiredPoints.size();</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ADD_DESIRED_DIR(LPCSTR<sp/>mapped_name,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>desireds_dir,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>weight_dir)<sp/>{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gVec3<sp/>direction;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>direction.setX(-1<sp/>*<sp/>desireds_dir[0]);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>direction.setY(desireds_dir[1]);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>direction.setZ(desireds_dir[2]);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_poseTrans_Avatar-&gt;addDesiredDirObjective(mapped_name,<sp/>weight_dir,<sp/>direction);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g_poseTrans_Avatar-&gt;desiredDirs.size();</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SET_DESIRED_POINTS(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>desireds,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>weight_pos)<sp/>{</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gVec3<sp/>pos;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos.setX(-1<sp/>*<sp/>desireds[0]);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos.setY(desireds[1]);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos.setZ(desireds[2]);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_poseTrans_Avatar-&gt;desiredPoints[i].pos_desired<sp/>=<sp/>pos;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_poseTrans_Avatar-&gt;desiredPoints[i].weight<sp/>=<sp/>weight_pos;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g_poseTrans_Avatar-&gt;desiredPoints.size();</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SET_DESIRED_DIRS(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>des_dir,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>weight_dir)<sp/>{</highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gVec3<sp/>dir;<sp/></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dir.setX(-1<sp/>*<sp/>des_dir[0]);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dir.setY(des_dir[1]);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dir.setZ(des_dir[2]);</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;<sp/>desiredDirs<sp/>&quot;<sp/>&lt;&lt;<sp/>g_poseTrans_Avatar-&gt;desiredDirs.size()<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_poseTrans_Avatar-&gt;desiredDirs[i].dir_desired<sp/>=<sp/>dir;</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_poseTrans_Avatar-&gt;desiredDirs[i].weight_dir<sp/>=<sp/>weight_dir;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g_poseTrans_Avatar-&gt;desiredDirs.size();</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Motion<sp/>Data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>INIT_DATA(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mbs_i,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Frames)<sp/>{</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mbs_i<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tarQuaternions<sp/>=<sp/>arma::mat(mbs_src-&gt;sizeSafeCoordArray(),<sp/>Frames,<sp/>arma::fill::zeros);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mbs_i<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tarQuaternions<sp/>=<sp/>arma::mat(mbs_tar-&gt;sizeSafeCoordArray(),<sp/>Frames,<sp/>arma::fill::zeros);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mbs_i<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tarQuaternions<sp/>=<sp/>arma::mat(mbs-&gt;sizeSafeCoordArray(),<sp/>Frames,<sp/>arma::fill::zeros);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Frames<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Frames<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>DoF(quat)<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tarQuaternions.n_rows<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tarQuaternions.n_cols;</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UPDATE_POSE_fromData(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mbs_i,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iter)<sp/>{</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;<sp/>total<sp/>frames<sp/>&quot;<sp/>&lt;&lt;<sp/>g_refCoord.n_cols<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//for<sp/>(int<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>6;<sp/>k++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;<sp/>hi<sp/>&quot;<sp/>&lt;&lt;<sp/>g_refCoord.col(iter)[k]<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arma::vec<sp/>pose<sp/>=<sp/>g_refCoord.col(iter);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mbs_i<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs_src-&gt;setFromCompactCoordArray(pose);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs_src-&gt;updateKinematicsUptoPos();</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mbs_i<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs_tar-&gt;setFromCompactCoordArray(pose);</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs_tar-&gt;updateKinematicsUptoPos();</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mbs_i<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs-&gt;setFromCompactCoordArray(pose);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs-&gt;updateKinematicsUptoPos();</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UPDATE_JOINTVEC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mbs_i,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iter)<sp/>{</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mbs_i<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arma::vec<sp/>Quat_pose(mbs_src-&gt;numLinks()*4<sp/>+<sp/>3);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs_src-&gt;getSafeCoordArray(Quat_pose);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tarQuaternions.submat(0,<sp/>iter,<sp/>Quat_pose.n_elem<sp/>-<sp/>1,<sp/>iter)<sp/>=<sp/>Quat_pose;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//tarQuaternions(0,<sp/>iter,<sp/>arma::SizeMat(Quat_pose.n_elem,<sp/>1))<sp/>=<sp/>Quat_pose;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mbs_i<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arma::vec<sp/>Quat_pose(mbs_tar-&gt;numLinks()<sp/>*<sp/>4<sp/>+<sp/>3);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs_tar-&gt;getSafeCoordArray(Quat_pose);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tarQuaternions.submat(0,<sp/>iter,<sp/>Quat_pose.n_elem<sp/>-<sp/>1,<sp/>iter)<sp/>=<sp/>Quat_pose;</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mbs_i<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arma::vec<sp/>Quat_pose(mbs-&gt;numLinks()<sp/>*<sp/>4<sp/>+<sp/>3);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs-&gt;getSafeCoordArray(Quat_pose);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tarQuaternions.submat(0,<sp/>iter,<sp/>Quat_pose.n_elem<sp/>-<sp/>1,<sp/>iter)<sp/>=<sp/>Quat_pose;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Export<sp/>Data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SAVE_BVH(LPCSTR<sp/>bvh_file_path,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mbs_i,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>frametime,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scale)<sp/>{</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mbs_i<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_saveBVH-&gt;saveBVHFile(mbs_src,<sp/>bvh_file_path,<sp/>tarQuaternions,<sp/>mgBone::_AXISORDER::ZYX,<sp/>frametime,<sp/>scale);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mbs_i<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_saveBVH-&gt;saveBVHFile(mbs_tar,<sp/>bvh_file_path,<sp/>tarQuaternions,<sp/>mgBone::_AXISORDER::ZYX,<sp/>frametime,<sp/>scale);</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mbs_i<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_saveBVH-&gt;saveBVHFile(mbs,<sp/>bvh_file_path,<sp/>tarQuaternions,<sp/>mgBone::_AXISORDER::ZYX,<sp/>frametime,<sp/>scale);</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unity<sp/>MBS<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UPDATE_BASE_POSITION_UnitytoMW(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mbs_i,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>input_pos)<sp/>{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gVec3<sp/>position(-1.0<sp/>*<sp/>input_pos[0],<sp/>input_pos[1],<sp/>input_pos[2]);</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mbs_i<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs_src-&gt;setBasePosition(position);</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs_src-&gt;updateKinematicsUptoPos();</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mbs_i<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs_tar-&gt;setBasePosition(position);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs_tar-&gt;updateKinematicsUptoPos();</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mbs_i<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs-&gt;setBasePosition(position);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs-&gt;updateKinematicsUptoPos();</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UPDATE_JOINT_QUATERNION_UnitytoMW(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mbs_i,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jointidx,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>input_Quat)<sp/>{</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gQuat<sp/>quat;<sp/>quat.set(input_Quat[0],<sp/>input_Quat[1],<sp/>input_Quat[2],<sp/>input_Quat[3]);</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gRotMat<sp/>rot_LeftHanded<sp/>=<sp/>quat.inRotMatrix();</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gRotMat<sp/>rot_RightHanded;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>convert_L2R<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[9];</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>convert_L2R[0]<sp/>=<sp/>rot_LeftHanded.e(0);<sp/><sp/><sp/><sp/>convert_L2R[3]<sp/>=<sp/>-1<sp/>*<sp/>rot_LeftHanded.e(3);<sp/>convert_L2R[6]<sp/>=<sp/>-1<sp/>*<sp/>rot_LeftHanded.e(6);</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>convert_L2R[1]<sp/>=<sp/>-1<sp/>*<sp/>rot_LeftHanded.e(1);<sp/>convert_L2R[4]<sp/>=<sp/>rot_LeftHanded.e(4);<sp/><sp/><sp/><sp/>convert_L2R[7]<sp/>=<sp/>rot_LeftHanded.e(7);</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>convert_L2R[2]<sp/>=<sp/>-1<sp/>*<sp/>rot_LeftHanded.e(2);<sp/>convert_L2R[5]<sp/>=<sp/>rot_LeftHanded.e(5);<sp/><sp/><sp/><sp/>convert_L2R[8]<sp/>=<sp/>rot_LeftHanded.e(8);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rot_RightHanded.set(convert_L2R);</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mbs_i<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gXMat<sp/>mat_G<sp/>=<sp/>mbs_src-&gt;link(jointidx)-&gt;localFrame();</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat_G.setRot(rot_RightHanded);</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs_src-&gt;link(jointidx)-&gt;setFromSafeCoordArray(mat_G.rotInQuat().cptr());</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs_src-&gt;updateKinematicsUptoPos();</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mbs_i<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gXMat<sp/>mat_G<sp/>=<sp/>mbs_tar-&gt;link(jointidx)-&gt;localFrame();</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat_G.setRot(rot_RightHanded);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs_tar-&gt;link(jointidx)-&gt;setFromSafeCoordArray(mat_G.rotInQuat().cptr());</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs_tar-&gt;updateKinematicsUptoPos();</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mbs_i<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gXMat<sp/>mat_G<sp/>=<sp/>mbs-&gt;link(jointidx)-&gt;localFrame();</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat_G.setRot(rot_RightHanded);</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs-&gt;link(jointidx)-&gt;setFromSafeCoordArray(mat_G.rotInQuat().cptr());</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs-&gt;updateKinematicsUptoPos();</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UPDATE_POSE_UnitytoMW(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mbs_i,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>input_Pose)<sp/>{</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mbs_i<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;<sp/>0<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>input_Pose[0]<sp/>&lt;&lt;<sp/>&quot;<sp/>1<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>input_Pose[1]<sp/>&lt;&lt;&quot;<sp/>2<sp/>:<sp/>&quot;&lt;&lt;<sp/>input_Pose[2]<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>mbs_src-&gt;numLinks();<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>base<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gVec3<sp/>position(-1.0<sp/>*<sp/>input_Pose[0],<sp/>input_Pose[1],<sp/>input_Pose[2]);</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gRotMat<sp/>rot_righthanded<sp/>=<sp/>TranseRotUnitytoMW(input_Pose[3<sp/>+<sp/>4<sp/>*<sp/>j<sp/>+<sp/>0],<sp/>input_Pose[3<sp/>+<sp/>4<sp/>*<sp/>j<sp/>+<sp/>1],<sp/>input_Pose[3<sp/>+<sp/>4<sp/>*<sp/>j<sp/>+<sp/>2],<sp/>input_Pose[3<sp/>+<sp/>4<sp/>*<sp/>j<sp/>+<sp/>3]);</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gXMat<sp/>T;<sp/>T.setTrn(position);<sp/>T.setRot(rot_righthanded);</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs_src-&gt;setBasePose(T);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gRotMat<sp/>rot_righthanded<sp/>=<sp/>TranseRotUnitytoMW(input_Pose[3<sp/>+<sp/>4<sp/>*<sp/>j<sp/>+<sp/>0],<sp/>input_Pose[3<sp/>+<sp/>4<sp/>*<sp/>j<sp/>+<sp/>1],<sp/>input_Pose[3<sp/>+<sp/>4<sp/>*<sp/>j<sp/>+<sp/>2],<sp/>input_Pose[3<sp/>+<sp/>4<sp/>*<sp/>j<sp/>+<sp/>3]);</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs_src-&gt;link(j)-&gt;setFromSafeCoordArray(rot_righthanded.inQuat().cptr());</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs_src-&gt;updateKinematicsUptoPos();</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gVec3<sp/>pos1<sp/>=<sp/>mbs_src-&gt;link(0)-&gt;frame().trn();</highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mbs_i<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>mbs_tar-&gt;numLinks();<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>base<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gVec3<sp/>position(-1.0<sp/>*<sp/>input_Pose[0],<sp/>input_Pose[1],<sp/>input_Pose[2]);</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs_tar-&gt;setBasePosition(position);</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rotation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gRotMat<sp/>rot_righthanded<sp/>=<sp/>TranseRotUnitytoMW(input_Pose[3<sp/>+<sp/>4<sp/>*<sp/>j<sp/>+<sp/>0],<sp/>input_Pose[3<sp/>+<sp/>4<sp/>*<sp/>j<sp/>+<sp/>1],<sp/>input_Pose[3<sp/>+<sp/>4<sp/>*<sp/>j<sp/>+<sp/>2],<sp/>input_Pose[3<sp/>+<sp/>4<sp/>*<sp/>j<sp/>+<sp/>3]);</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gXMat<sp/>mat_G<sp/>=<sp/>mbs_tar-&gt;link(j)-&gt;localFrame();</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat_G.setRot(rot_righthanded);</highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs_tar-&gt;link(j)-&gt;setFromSafeCoordArray(mat_G.rotInQuat().cptr());</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs_tar-&gt;updateKinematicsUptoPos();</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mbs_i<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>mbs-&gt;numLinks();<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>base<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gVec3<sp/>position(-1.0<sp/>*<sp/>input_Pose[0],<sp/>input_Pose[1],<sp/>input_Pose[2]);</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs-&gt;setBasePosition(position);</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rotation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gRotMat<sp/>rot_righthanded<sp/>=<sp/>TranseRotUnitytoMW(input_Pose[3<sp/>+<sp/>4<sp/>*<sp/>j<sp/>+<sp/>0],<sp/>input_Pose[3<sp/>+<sp/>4<sp/>*<sp/>j<sp/>+<sp/>1],<sp/>input_Pose[3<sp/>+<sp/>4<sp/>*<sp/>j<sp/>+<sp/>2],<sp/>input_Pose[3<sp/>+<sp/>4<sp/>*<sp/>j<sp/>+<sp/>3]);</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gXMat<sp/>mat_G<sp/>=<sp/>mbs-&gt;link(j)-&gt;localFrame();</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat_G.setRot(rot_righthanded);</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs-&gt;link(j)-&gt;setFromSafeCoordArray(mat_G.rotInQuat().cptr());</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs-&gt;updateKinematicsUptoPos();</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OUTPUT_JOINT_POSE_UNITY(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mbs_i,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>output_POSE)<sp/>{</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mbs_i<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs_src-&gt;updateKinematicsUptoPos();</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//hip<sp/>world<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gVec3<sp/>pos<sp/>=<sp/>mbs_src-&gt;link(0)-&gt;frame().trn();</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//convert<sp/>righthand<sp/>quaternion<sp/>to<sp/>lefthand<sp/>quaternion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_POSE[0]<sp/>=<sp/>-1<sp/>*<sp/>pos.x();<sp/>output_POSE[1]<sp/>=<sp/>pos.y();<sp/>output_POSE[2]<sp/>=<sp/>pos.z();</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//joints<sp/>local<sp/>rotation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mbs_src-&gt;numLinks();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arma::vec<sp/>Quat(4);</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs_src-&gt;link(i)-&gt;getSafeCoordArray(Quat.memptr());</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gQuat<sp/>quat_rH<sp/>=<sp/>gQuat(Quat[0],Quat[1],<sp/>Quat[2],<sp/>Quat[3]);</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gQuat<sp/>quat_lH;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//convert<sp/>righthand<sp/>quaternion<sp/>to<sp/>lefthand<sp/>quaternion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quat_lH.setX(quat_rH.x());</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quat_lH.setY(-1.0<sp/>*<sp/>quat_rH.y());</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quat_lH.setZ(-1.0<sp/>*<sp/>quat_rH.z());</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quat_lH.setW(quat_rH.w());</highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//convert<sp/>righthand<sp/>quaternion<sp/>to<sp/>lefthand<sp/>quaternion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_POSE[3<sp/>+<sp/>4<sp/>*<sp/>i<sp/>+<sp/>0]<sp/>=<sp/>quat_lH.x();<sp/>output_POSE[3<sp/>+<sp/>4<sp/>*<sp/>i<sp/>+<sp/>1]<sp/>=<sp/>quat_lH.y();<sp/>output_POSE[3<sp/>+<sp/>4<sp/>*<sp/>i<sp/>+<sp/>2]<sp/>=<sp/>quat_lH.z();<sp/>output_POSE[3<sp/>+<sp/>4<sp/>*<sp/>i<sp/>+<sp/>3]<sp/>=<sp/>quat_lH.w();</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mbs_i<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//output_POSE<sp/>=<sp/>(float*)malloc((mbs_tar-&gt;numLinks()*4<sp/>+<sp/>3)<sp/>*<sp/>sizeof(float));<sp/>//<sp/>��������<sp/>�迭<sp/>�Ҵ�</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs_tar-&gt;updateKinematicsUptoPos();</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//hip<sp/>world<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gVec3<sp/>pos<sp/>=<sp/>mbs_tar-&gt;link(0)-&gt;frame().trn();</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//convert<sp/>righthand<sp/>quaternion<sp/>to<sp/>lefthand<sp/>quaternion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_POSE[0]<sp/>=<sp/>-1<sp/>*<sp/>pos.x();<sp/>output_POSE[1]<sp/>=<sp/>pos.y();<sp/>output_POSE[2]<sp/>=<sp/>pos.z();</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//joints<sp/>local<sp/>rotation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mbs_tar-&gt;numLinks();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arma::vec<sp/>Quat(4);</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs_tar-&gt;link(i)-&gt;getSafeCoordArray(Quat.memptr());</highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;<sp/>DLL<sp/>&quot;<sp/>&lt;&lt;<sp/>mbs_tar-&gt;link(i)-&gt;name()<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gQuat<sp/>quat_rH<sp/>=<sp/>gQuat(Quat[0],<sp/>Quat[1],<sp/>Quat[2],<sp/>Quat[3]);</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gQuat<sp/>quat_lH;</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//convert<sp/>righthand<sp/>quaternion<sp/>to<sp/>lefthand<sp/>quaternion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quat_lH.setX(quat_rH.x());</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quat_lH.setY(-1.0<sp/>*<sp/>quat_rH.y());</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quat_lH.setZ(-1.0<sp/>*<sp/>quat_rH.z());</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quat_lH.setW(quat_rH.w());</highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//convert<sp/>righthand<sp/>quaternion<sp/>to<sp/>lefthand<sp/>quaternion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_POSE[3<sp/>+<sp/>4<sp/>*<sp/>i<sp/>+<sp/>0]<sp/>=<sp/>quat_lH.x();<sp/>output_POSE[3<sp/>+<sp/>4<sp/>*<sp/>i<sp/>+<sp/>1]<sp/>=<sp/>quat_lH.y();<sp/>output_POSE[3<sp/>+<sp/>4<sp/>*<sp/>i<sp/>+<sp/>2]<sp/>=<sp/>quat_lH.z();<sp/>output_POSE[3<sp/>+<sp/>4<sp/>*<sp/>i<sp/>+<sp/>3]<sp/>=<sp/>quat_lH.w();</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mbs_i<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs-&gt;updateKinematicsUptoPos();</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//hip<sp/>world<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gVec3<sp/>pos<sp/>=<sp/>mbs-&gt;link(0)-&gt;frame().trn();</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//convert<sp/>righthand<sp/>quaternion<sp/>to<sp/>lefthand<sp/>quaternion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_POSE[0]<sp/>=<sp/>-1<sp/>*<sp/>pos.x();<sp/>output_POSE[1]<sp/>=<sp/>pos.y();<sp/>output_POSE[2]<sp/>=<sp/>pos.z();</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//joints<sp/>local<sp/>rotation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mbs-&gt;numLinks();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arma::vec<sp/>Quat(4);</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs-&gt;link(i)-&gt;getSafeCoordArray(Quat.memptr());</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;<sp/>DLL<sp/>&quot;<sp/>&lt;&lt;<sp/>mbs_tar-&gt;link(i)-&gt;name()<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gQuat<sp/>quat_rH<sp/>=<sp/>gQuat(Quat[0],<sp/>Quat[1],<sp/>Quat[2],<sp/>Quat[3]);</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gQuat<sp/>quat_lH;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//convert<sp/>righthand<sp/>quaternion<sp/>to<sp/>lefthand<sp/>quaternion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quat_lH.setX(quat_rH.x());</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quat_lH.setY(-1.0<sp/>*<sp/>quat_rH.y());</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quat_lH.setZ(-1.0<sp/>*<sp/>quat_rH.z());</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quat_lH.setW(quat_rH.w());</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//convert<sp/>righthand<sp/>quaternion<sp/>to<sp/>lefthand<sp/>quaternion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_POSE[3<sp/>+<sp/>4<sp/>*<sp/>i<sp/>+<sp/>0]<sp/>=<sp/>quat_lH.x();<sp/>output_POSE[3<sp/>+<sp/>4<sp/>*<sp/>i<sp/>+<sp/>1]<sp/>=<sp/>quat_lH.y();<sp/>output_POSE[3<sp/>+<sp/>4<sp/>*<sp/>i<sp/>+<sp/>2]<sp/>=<sp/>quat_lH.z();<sp/>output_POSE[3<sp/>+<sp/>4<sp/>*<sp/>i<sp/>+<sp/>3]<sp/>=<sp/>quat_lH.w();</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UPDATE_JOINT_QUATERNION_UnitytoMW_usingName(LPCSTR<sp/>jointname,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>input_Quat)<sp/>{</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gQuat<sp/>quat;<sp/>quat.set(input_Quat[0],<sp/>input_Quat[1],<sp/>input_Quat[2],<sp/>input_Quat[3]);</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gRotMat<sp/>rot_LeftHanded<sp/>=<sp/>quat.inRotMatrix();</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gRotMat<sp/>rot_RightHanded;</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>convert_L2R<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[9];</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>convert_L2R[0]<sp/>=<sp/>rot_LeftHanded.e(0);<sp/><sp/><sp/><sp/>convert_L2R[3]<sp/>=<sp/>-1<sp/>*<sp/>rot_LeftHanded.e(3);<sp/>convert_L2R[6]<sp/>=<sp/>-1<sp/>*<sp/>rot_LeftHanded.e(6);</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>convert_L2R[1]<sp/>=<sp/>-1<sp/>*<sp/>rot_LeftHanded.e(1);<sp/>convert_L2R[4]<sp/>=<sp/>rot_LeftHanded.e(4);<sp/><sp/><sp/><sp/>convert_L2R[7]<sp/>=<sp/>rot_LeftHanded.e(7);</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>convert_L2R[2]<sp/>=<sp/>-1<sp/>*<sp/>rot_LeftHanded.e(2);<sp/>convert_L2R[5]<sp/>=<sp/>rot_LeftHanded.e(5);<sp/><sp/><sp/><sp/>convert_L2R[8]<sp/>=<sp/>rot_LeftHanded.e(8);</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rot_RightHanded.set(convert_L2R);</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gXMat<sp/>mat_G<sp/>=<sp/>mbs-&gt;findLink(jointname)-&gt;localFrame();</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat_G.setRot(rot_RightHanded);</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs-&gt;findLink(jointname)-&gt;setFromSafeCoordArray(mat_G.rotInQuat().cptr());</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs-&gt;updateKinematicsUptoPos();</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/>DLL_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OUTPUT_JOINT_QUATERNION_UNITY(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jointindex,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>output_Quat)<sp/>{</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mbs-&gt;updateKinematicsUptoPos();</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gRotMat<sp/>rot_MW<sp/>=<sp/>mbs-&gt;link(jointindex)-&gt;localFrame().rot();</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gQuat<sp/>quat_rH<sp/>=<sp/>rot_MW.inQuat();</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gQuat<sp/>quat_lH;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//convert<sp/>righthand<sp/>quaternion<sp/>to<sp/>lefthand<sp/>quaternion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quat_lH.setX(quat_rH.x());</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quat_lH.setY(-1.0<sp/>*<sp/>quat_rH.y());</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quat_lH.setZ(-1.0<sp/>*<sp/>quat_rH.z());</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quat_lH.setW(quat_rH.w());</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_Quat[0]<sp/>=<sp/>quat_lH.x();<sp/>output_Quat[1]<sp/>=<sp/>quat_lH.y();<sp/>output_Quat[2]<sp/>=<sp/>quat_lH.z();<sp/>output_Quat[3]<sp/>=<sp/>quat_lH.w();</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="MBS_CDLL/MBS_CDLL.cpp"/>
  </compounddef>
</doxygen>
